<?xml version="1.0" encoding="UTF-8" standalone="yes"?><!DOCTYPE report PUBLIC "-//JACOCO//DTD Report 1.1//EN" "report.dtd"><report name="checker-core"><sessioninfo id="LucasManuel-93a9128b" start="1759768990330" dump="1759768997161"/><package name="com/luchersol/specialized_checkers/io"><class name="com/luchersol/specialized_checkers/io/CheckerJson" sourcefilename="CheckerJson.java"><method name="&lt;init&gt;" desc="(Lcom/fasterxml/jackson/databind/JsonNode;Ljava/lang/String;)V" line="45"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Lcom/fasterxml/jackson/databind/JsonNode;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerJson;" line="56"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/io/File;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerJson;" line="68"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/lang/String;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerJson;" line="82"><counter type="INSTRUCTION" missed="17" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="(Lcom/fasterxml/jackson/databind/JsonNode;)Lcom/luchersol/specialized_checkers/io/CheckerJson;" line="95"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/io/File;)Lcom/luchersol/specialized_checkers/io/CheckerJson;" line="106"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerJson;" line="117"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/io/CheckerJson;" line="127"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasProperty" desc="(Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerJson;" line="137"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isArray" desc="(Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerJson;" line="147"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isBigDecimal" desc="(Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerJson;" line="157"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isBigInteger" desc="(Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerJson;" line="167"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isBinary" desc="(Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerJson;" line="177"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isBoolean" desc="(Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerJson;" line="187"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isContainerNode" desc="(Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerJson;" line="197"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isDouble" desc="(Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerJson;" line="207"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isEmpty" desc="(Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerJson;" line="217"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isFloat" desc="(Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerJson;" line="227"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isFloatingPointNumber" desc="(Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerJson;" line="237"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isInt" desc="(Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerJson;" line="247"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isIntegralNumber" desc="(Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerJson;" line="257"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLong" desc="(Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerJson;" line="267"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isMissingNode" desc="(Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerJson;" line="277"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isNull" desc="(Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerJson;" line="287"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isNumber" desc="(Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerJson;" line="297"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isObject" desc="(Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerJson;" line="307"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isPojo" desc="(Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerJson;" line="317"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isShort" desc="(Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerJson;" line="327"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isTextual" desc="(Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerJson;" line="337"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isInRange" desc="(Ljava/lang/String;II)Lcom/luchersol/specialized_checkers/io/CheckerJson;" line="349"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="matchesRegex" desc="(Ljava/lang/String;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerJson;" line="363"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isInEnum" desc="(Ljava/lang/String;Ljava/util/List;)Lcom/luchersol/specialized_checkers/io/CheckerJson;" line="377"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasLengthBetween" desc="(Ljava/lang/String;II)Lcom/luchersol/specialized_checkers/io/CheckerJson;" line="392"><counter type="INSTRUCTION" missed="0" covered="28"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="checkNodeType" desc="(Ljava/lang/String;Ljava/util/function/Predicate;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerJson;" line="408"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getProperty" desc="(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;" line="423"><counter type="INSTRUCTION" missed="5" covered="34"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="3" covered="6"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getProperty" desc="(Ljava/lang/String;)Lcom/fasterxml/jackson/databind/JsonNode;" line="446"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="containsProperty" desc="(Ljava/lang/String;)Z" line="456"><counter type="INSTRUCTION" missed="1" covered="7"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$checkNodeType$5" desc="(Ljava/lang/String;Ljava/util/function/Predicate;Lcom/fasterxml/jackson/databind/JsonNode;)Z" line="409"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$hasLengthBetween$4" desc="(Ljava/lang/String;IILcom/fasterxml/jackson/databind/JsonNode;)Z" line="393"><counter type="INSTRUCTION" missed="1" covered="22"/><counter type="BRANCH" missed="4" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="4" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isInEnum$3" desc="(Ljava/lang/String;Ljava/util/List;Lcom/fasterxml/jackson/databind/JsonNode;)Z" line="378"><counter type="INSTRUCTION" missed="1" covered="17"/><counter type="BRANCH" missed="3" covered="3"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="3" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$matchesRegex$2" desc="(Ljava/lang/String;Ljava/lang/String;Lcom/fasterxml/jackson/databind/JsonNode;)Z" line="364"><counter type="INSTRUCTION" missed="1" covered="17"/><counter type="BRANCH" missed="3" covered="3"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="3" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isInRange$1" desc="(Ljava/lang/String;IILcom/fasterxml/jackson/databind/JsonNode;)Z" line="350"><counter type="INSTRUCTION" missed="1" covered="20"/><counter type="BRANCH" missed="4" covered="4"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="4" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$hasProperty$0" desc="(Ljava/lang/String;Lcom/fasterxml/jackson/databind/JsonNode;)Z" line="137"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="227" covered="389"/><counter type="BRANCH" missed="17" covered="21"/><counter type="LINE" missed="22" covered="44"/><counter type="COMPLEXITY" missed="33" covered="29"/><counter type="METHOD" missed="16" covered="27"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/luchersol/specialized_checkers/io/CheckerURI" sourcefilename="CheckerURI.java"><method name="&lt;init&gt;" desc="(Ljava/net/URI;Ljava/lang/String;)V" line="44"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/net/URI;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerURI;" line="55"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/lang/String;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerURI;" line="66"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="(Ljava/net/URI;)Lcom/luchersol/specialized_checkers/io/CheckerURI;" line="77"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="(Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerURI;" line="87"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/io/CheckerURI;" line="97"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isAbsolute" desc="()Lcom/luchersol/specialized_checkers/io/CheckerURI;" line="106"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isRelative" desc="()Lcom/luchersol/specialized_checkers/io/CheckerURI;" line="115"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasSqueme" desc="()Lcom/luchersol/specialized_checkers/io/CheckerURI;" line="124"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasSqueme" desc="([Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerURI;" line="134"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasHost" desc="()Lcom/luchersol/specialized_checkers/io/CheckerURI;" line="144"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasHost" desc="([Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerURI;" line="154"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasPort" desc="()Lcom/luchersol/specialized_checkers/io/CheckerURI;" line="164"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasPort" desc="([I)Lcom/luchersol/specialized_checkers/io/CheckerURI;" line="174"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasAuthority" desc="()Lcom/luchersol/specialized_checkers/io/CheckerURI;" line="184"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasAuthority" desc="([Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerURI;" line="194"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasFrament" desc="()Lcom/luchersol/specialized_checkers/io/CheckerURI;" line="205"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasFrament" desc="([Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerURI;" line="215"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasPath" desc="()Lcom/luchersol/specialized_checkers/io/CheckerURI;" line="225"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasPath" desc="([Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerURI;" line="235"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasQuery" desc="()Lcom/luchersol/specialized_checkers/io/CheckerURI;" line="245"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasQuery" desc="([Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerURI;" line="255"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$hasQuery$22" desc="([Ljava/lang/String;Ljava/net/URI;)Z" line="255"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$hasQuery$21" desc="(Ljava/net/URI;Ljava/lang/String;)Z" line="255"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$hasQuery$20" desc="(Ljava/net/URI;)Z" line="245"><counter type="INSTRUCTION" missed="1" covered="6"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$hasPath$19" desc="([Ljava/lang/String;Ljava/net/URI;)Z" line="235"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$hasPath$18" desc="(Ljava/net/URI;Ljava/lang/String;)Z" line="235"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$hasPath$17" desc="(Ljava/net/URI;)Z" line="225"><counter type="INSTRUCTION" missed="1" covered="6"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$hasFrament$16" desc="([Ljava/lang/String;Ljava/net/URI;)Z" line="215"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$hasFrament$15" desc="(Ljava/net/URI;Ljava/lang/String;)Z" line="215"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$hasFrament$14" desc="(Ljava/net/URI;)Z" line="205"><counter type="INSTRUCTION" missed="1" covered="6"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$hasAuthority$13" desc="([Ljava/lang/String;Ljava/net/URI;)Z" line="195"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$hasAuthority$12" desc="(Ljava/net/URI;Ljava/lang/String;)Z" line="195"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$hasAuthority$11" desc="(Ljava/net/URI;)Z" line="184"><counter type="INSTRUCTION" missed="1" covered="6"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$hasPort$10" desc="([ILjava/net/URI;)Z" line="174"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$hasPort$9" desc="(Ljava/net/URI;I)Z" line="174"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$hasPort$8" desc="(Ljava/net/URI;)Z" line="164"><counter type="INSTRUCTION" missed="1" covered="6"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$hasHost$7" desc="([Ljava/lang/String;Ljava/net/URI;)Z" line="154"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$hasHost$6" desc="(Ljava/net/URI;Ljava/lang/String;)Z" line="154"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$hasHost$5" desc="(Ljava/net/URI;)Z" line="144"><counter type="INSTRUCTION" missed="1" covered="6"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$hasSqueme$4" desc="([Ljava/lang/String;Ljava/net/URI;)Z" line="134"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$hasSqueme$3" desc="(Ljava/net/URI;Ljava/lang/String;)Z" line="134"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$hasSqueme$2" desc="(Ljava/net/URI;)Z" line="124"><counter type="INSTRUCTION" missed="1" covered="6"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isRelative$1" desc="(Ljava/net/URI;)Z" line="115"><counter type="INSTRUCTION" missed="1" covered="6"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isAbsolute$0" desc="(Ljava/net/URI;)Z" line="106"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="25" covered="425"/><counter type="BRANCH" missed="8" covered="8"/><counter type="LINE" missed="4" covered="28"/><counter type="COMPLEXITY" missed="11" covered="42"/><counter type="METHOD" missed="3" covered="42"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/luchersol/specialized_checkers/io/CheckerFile" sourcefilename="CheckerFile.java"><method name="&lt;init&gt;" desc="(Ljava/io/File;Ljava/lang/String;)V" line="48"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/io/File;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerFile;" line="60"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/lang/String;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerFile;" line="71"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="(Ljava/io/File;)Lcom/luchersol/specialized_checkers/io/CheckerFile;" line="82"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="(Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerFile;" line="92"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/io/CheckerFile;" line="103"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="exists" desc="()Lcom/luchersol/specialized_checkers/io/CheckerFile;" line="112"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isTypeFile" desc="()Lcom/luchersol/specialized_checkers/io/CheckerFile;" line="121"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isTypeDirectory" desc="()Lcom/luchersol/specialized_checkers/io/CheckerFile;" line="130"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isTypeHidden" desc="()Lcom/luchersol/specialized_checkers/io/CheckerFile;" line="139"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="canRead" desc="()Lcom/luchersol/specialized_checkers/io/CheckerFile;" line="148"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="canWrite" desc="()Lcom/luchersol/specialized_checkers/io/CheckerFile;" line="157"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="min" desc="(I)Lcom/luchersol/specialized_checkers/io/CheckerFile;" line="167"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="max" desc="(I)Lcom/luchersol/specialized_checkers/io/CheckerFile;" line="177"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="inRange" desc="(II)Lcom/luchersol/specialized_checkers/io/CheckerFile;" line="189"><counter type="INSTRUCTION" missed="0" covered="25"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="withExtension" desc="(Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerFile;" line="200"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="withAnyExtension" desc="([Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerFile;" line="210"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isIdentical" desc="(Ljava/lang/String;)Lcom/luchersol/specialized_checkers/io/CheckerFile;" line="220"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="areFilesIdentical" desc="(Ljava/io/File;Ljava/lang/String;)Z" line="231"><counter type="INSTRUCTION" missed="15" covered="52"/><counter type="BRANCH" missed="6" covered="6"/><counter type="LINE" missed="4" covered="10"/><counter type="COMPLEXITY" missed="4" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getFileExtension" desc="(Ljava/io/File;)Ljava/lang/String;" line="262"><counter type="INSTRUCTION" missed="2" covered="18"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getFileSize" desc="(Ljava/io/File;)J" line="277"><counter type="INSTRUCTION" missed="32" covered="11"/><counter type="BRANCH" missed="7" covered="3"/><counter type="LINE" missed="6" covered="2"/><counter type="COMPLEXITY" missed="5" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isIdentical$12" desc="(Ljava/lang/String;Ljava/io/File;)Z" line="220"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$withAnyExtension$11" desc="([Ljava/lang/String;Ljava/io/File;)Z" line="210"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$withAnyExtension$10" desc="(Ljava/io/File;Ljava/lang/String;)Z" line="210"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$withExtension$9" desc="(Ljava/lang/String;Ljava/io/File;)Z" line="200"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$inRange$8" desc="(IILjava/io/File;)Z" line="190"><counter type="INSTRUCTION" missed="1" covered="15"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$max$7" desc="(ILjava/io/File;)Z" line="178"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$min$6" desc="(ILjava/io/File;)Z" line="167"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$canWrite$5" desc="(Ljava/io/File;)Z" line="157"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$canRead$4" desc="(Ljava/io/File;)Z" line="148"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isTypeHidden$3" desc="(Ljava/io/File;)Z" line="139"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isTypeDirectory$2" desc="(Ljava/io/File;)Z" line="130"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isTypeFile$1" desc="(Ljava/io/File;)Z" line="121"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$exists$0" desc="(Ljava/io/File;)Z" line="112"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="71" covered="302"/><counter type="BRANCH" missed="17" covered="17"/><counter type="LINE" missed="15" covered="34"/><counter type="COMPLEXITY" missed="16" covered="35"/><counter type="METHOD" missed="3" covered="31"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="CheckerFile.java"><line nr="48" mi="0" ci="4" mb="0" cb="0"/><line nr="49" mi="0" ci="1" mb="0" cb="0"/><line nr="60" mi="0" ci="6" mb="0" cb="0"/><line nr="71" mi="5" ci="0" mb="0" cb="0"/><line nr="72" mi="4" ci="0" mb="0" cb="0"/><line nr="82" mi="4" ci="0" mb="0" cb="0"/><line nr="92" mi="5" ci="0" mb="0" cb="0"/><line nr="93" mi="3" ci="0" mb="0" cb="0"/><line nr="103" mi="0" ci="2" mb="0" cb="0"/><line nr="112" mi="0" ci="11" mb="0" cb="0"/><line nr="121" mi="0" ci="11" mb="0" cb="0"/><line nr="130" mi="0" ci="11" mb="0" cb="0"/><line nr="139" mi="0" ci="11" mb="0" cb="0"/><line nr="148" mi="0" ci="11" mb="0" cb="0"/><line nr="157" mi="0" ci="11" mb="0" cb="0"/><line nr="167" mi="0" ci="26" mb="0" cb="2"/><line nr="177" mi="0" ci="3" mb="0" cb="0"/><line nr="178" mi="0" ci="26" mb="0" cb="2"/><line nr="189" mi="0" ci="3" mb="0" cb="0"/><line nr="190" mi="1" ci="37" mb="2" cb="2"/><line nr="200" mi="0" ci="14" mb="0" cb="0"/><line nr="210" mi="0" ci="20" mb="0" cb="0"/><line nr="220" mi="0" ci="13" mb="0" cb="0"/><line nr="231" mi="0" ci="5" mb="0" cb="0"/><line nr="233" mi="0" ci="8" mb="0" cb="2"/><line nr="235" mi="0" ci="6" mb="0" cb="0"/><line nr="236" mi="0" ci="5" mb="0" cb="0"/><line nr="238" mi="0" ci="3" mb="0" cb="0"/><line nr="239" mi="0" ci="3" mb="0" cb="0"/><line nr="242" mi="0" ci="7" mb="0" cb="2"/><line nr="243" mi="0" ci="4" mb="0" cb="0"/><line nr="244" mi="0" ci="7" mb="2" cb="2"/><line nr="245" mi="4" ci="0" mb="0" cb="0"/><line nr="248" mi="0" ci="4" mb="0" cb="0"/><line nr="249" mi="8" ci="0" mb="4" cb="0"/><line nr="250" mi="1" ci="0" mb="0" cb="0"/><line nr="251" mi="2" ci="0" mb="0" cb="0"/><line nr="262" mi="0" ci="3" mb="0" cb="0"/><line nr="263" mi="0" ci="4" mb="0" cb="0"/><line nr="265" mi="2" ci="5" mb="2" cb="2"/><line nr="267" mi="0" ci="6" mb="0" cb="0"/><line nr="277" mi="2" ci="5" mb="2" cb="2"/><line nr="279" mi="0" ci="6" mb="1" cb="1"/><line nr="281" mi="2" ci="0" mb="0" cb="0"/><line nr="282" mi="3" ci="0" mb="0" cb="0"/><line nr="284" mi="2" ci="0" mb="2" cb="0"/><line nr="285" mi="16" ci="0" mb="2" cb="0"/><line nr="286" mi="5" ci="0" mb="0" cb="0"/><line nr="290" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="71" covered="302"/><counter type="BRANCH" missed="17" covered="17"/><counter type="LINE" missed="15" covered="34"/><counter type="COMPLEXITY" missed="16" covered="35"/><counter type="METHOD" missed="3" covered="31"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="CheckerJson.java"><line nr="45" mi="0" ci="4" mb="0" cb="0"/><line nr="46" mi="0" ci="1" mb="0" cb="0"/><line nr="56" mi="0" ci="6" mb="0" cb="0"/><line nr="68" mi="0" ci="4" mb="0" cb="0"/><line nr="69" mi="0" ci="4" mb="0" cb="0"/><line nr="70" mi="0" ci="4" mb="0" cb="0"/><line nr="82" mi="5" ci="0" mb="0" cb="0"/><line nr="83" mi="4" ci="0" mb="0" cb="0"/><line nr="84" mi="4" ci="0" mb="0" cb="0"/><line nr="85" mi="4" ci="0" mb="0" cb="0"/><line nr="95" mi="0" ci="4" mb="0" cb="0"/><line nr="106" mi="0" ci="4" mb="0" cb="0"/><line nr="117" mi="4" ci="0" mb="0" cb="0"/><line nr="127" mi="0" ci="2" mb="0" cb="0"/><line nr="137" mi="0" ci="20" mb="0" cb="0"/><line nr="147" mi="0" ci="14" mb="0" cb="0"/><line nr="157" mi="14" ci="0" mb="0" cb="0"/><line nr="167" mi="14" ci="0" mb="0" cb="0"/><line nr="177" mi="14" ci="0" mb="0" cb="0"/><line nr="187" mi="0" ci="14" mb="0" cb="0"/><line nr="197" mi="14" ci="0" mb="0" cb="0"/><line nr="207" mi="14" ci="0" mb="0" cb="0"/><line nr="217" mi="14" ci="0" mb="0" cb="0"/><line nr="227" mi="14" ci="0" mb="0" cb="0"/><line nr="237" mi="14" ci="0" mb="0" cb="0"/><line nr="247" mi="0" ci="14" mb="0" cb="0"/><line nr="257" mi="14" ci="0" mb="0" cb="0"/><line nr="267" mi="14" ci="0" mb="0" cb="0"/><line nr="277" mi="14" ci="0" mb="0" cb="0"/><line nr="287" mi="0" ci="14" mb="0" cb="0"/><line nr="297" mi="14" ci="0" mb="0" cb="0"/><line nr="307" mi="0" ci="14" mb="0" cb="0"/><line nr="317" mi="14" ci="0" mb="0" cb="0"/><line nr="327" mi="14" ci="0" mb="0" cb="0"/><line nr="337" mi="0" ci="14" mb="0" cb="0"/><line nr="349" mi="0" ci="20" mb="0" cb="0"/><line nr="350" mi="0" ci="4" mb="0" cb="0"/><line nr="351" mi="1" ci="16" mb="4" cb="4"/><line nr="352" mi="0" ci="8" mb="0" cb="0"/><line nr="363" mi="0" ci="20" mb="0" cb="0"/><line nr="364" mi="0" ci="4" mb="0" cb="0"/><line nr="365" mi="1" ci="13" mb="3" cb="3"/><line nr="366" mi="0" ci="1" mb="0" cb="0"/><line nr="377" mi="0" ci="20" mb="0" cb="0"/><line nr="378" mi="0" ci="4" mb="0" cb="0"/><line nr="379" mi="1" ci="13" mb="3" cb="3"/><line nr="380" mi="0" ci="1" mb="0" cb="0"/><line nr="392" mi="0" ci="20" mb="0" cb="0"/><line nr="393" mi="0" ci="4" mb="0" cb="0"/><line nr="394" mi="1" ci="18" mb="4" cb="4"/><line nr="395" mi="0" ci="8" mb="0" cb="0"/><line nr="408" mi="0" ci="16" mb="0" cb="0"/><line nr="409" mi="0" ci="4" mb="0" cb="0"/><line nr="410" mi="0" ci="10" mb="1" cb="3"/><line nr="411" mi="0" ci="1" mb="0" cb="0"/><line nr="423" mi="0" ci="4" mb="0" cb="0"/><line nr="424" mi="0" ci="4" mb="0" cb="0"/><line nr="426" mi="0" ci="16" mb="0" cb="2"/><line nr="427" mi="0" ci="2" mb="1" cb="1"/><line nr="428" mi="2" ci="0" mb="0" cb="0"/><line nr="430" mi="0" ci="4" mb="0" cb="0"/><line nr="433" mi="0" ci="4" mb="0" cb="0"/><line nr="434" mi="1" ci="0" mb="0" cb="0"/><line nr="435" mi="2" ci="0" mb="0" cb="0"/><line nr="446" mi="0" ci="6" mb="0" cb="0"/><line nr="456" mi="1" ci="7" mb="1" cb="1"/><counter type="INSTRUCTION" missed="227" covered="389"/><counter type="BRANCH" missed="17" covered="21"/><counter type="LINE" missed="22" covered="44"/><counter type="COMPLEXITY" missed="33" covered="29"/><counter type="METHOD" missed="16" covered="27"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="CheckerURI.java"><line nr="44" mi="0" ci="4" mb="0" cb="0"/><line nr="45" mi="0" ci="1" mb="0" cb="0"/><line nr="55" mi="0" ci="6" mb="0" cb="0"/><line nr="66" mi="3" ci="0" mb="0" cb="0"/><line nr="67" mi="6" ci="0" mb="0" cb="0"/><line nr="77" mi="4" ci="0" mb="0" cb="0"/><line nr="87" mi="4" ci="0" mb="0" cb="0"/><line nr="97" mi="0" ci="2" mb="0" cb="0"/><line nr="106" mi="0" ci="18" mb="0" cb="0"/><line nr="115" mi="1" ci="21" mb="1" cb="1"/><line nr="124" mi="1" ci="21" mb="1" cb="1"/><line nr="134" mi="0" ci="29" mb="0" cb="0"/><line nr="135" mi="0" ci="3" mb="0" cb="0"/><line nr="144" mi="1" ci="21" mb="1" cb="1"/><line nr="154" mi="0" ci="29" mb="0" cb="0"/><line nr="155" mi="0" ci="3" mb="0" cb="0"/><line nr="164" mi="1" ci="21" mb="1" cb="1"/><line nr="174" mi="0" ci="31" mb="0" cb="0"/><line nr="175" mi="0" ci="3" mb="0" cb="0"/><line nr="184" mi="1" ci="21" mb="1" cb="1"/><line nr="194" mi="0" ci="18" mb="0" cb="0"/><line nr="195" mi="0" ci="11" mb="0" cb="0"/><line nr="196" mi="0" ci="3" mb="0" cb="0"/><line nr="205" mi="1" ci="21" mb="1" cb="1"/><line nr="215" mi="0" ci="29" mb="0" cb="0"/><line nr="216" mi="0" ci="3" mb="0" cb="0"/><line nr="225" mi="1" ci="21" mb="1" cb="1"/><line nr="235" mi="0" ci="29" mb="0" cb="0"/><line nr="236" mi="0" ci="3" mb="0" cb="0"/><line nr="245" mi="1" ci="21" mb="1" cb="1"/><line nr="255" mi="0" ci="29" mb="0" cb="0"/><line nr="256" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="25" covered="425"/><counter type="BRANCH" missed="8" covered="8"/><counter type="LINE" missed="4" covered="28"/><counter type="COMPLEXITY" missed="11" covered="42"/><counter type="METHOD" missed="3" covered="42"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="323" covered="1116"/><counter type="BRANCH" missed="42" covered="46"/><counter type="LINE" missed="41" covered="106"/><counter type="COMPLEXITY" missed="60" covered="106"/><counter type="METHOD" missed="22" covered="100"/><counter type="CLASS" missed="0" covered="3"/></package><package name="com/luchersol/specialized_checkers/lambda"><class name="com/luchersol/specialized_checkers/lambda/CheckerCallable" sourcefilename="CheckerCallable.java"><method name="&lt;init&gt;" desc="(Ljava/util/concurrent/Callable;Ljava/lang/String;)V" line="44"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/util/concurrent/Callable;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/lambda/CheckerCallable;" line="56"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/util/concurrent/Callable;)Lcom/luchersol/specialized_checkers/lambda/CheckerCallable;" line="67"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/lambda/CheckerCallable;" line="77"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="callWithoutException" desc="()Lcom/luchersol/specialized_checkers/lambda/CheckerCallable;" line="86"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="producesExpected" desc="(Ljava/lang/Object;)Lcom/luchersol/specialized_checkers/lambda/CheckerCallable;" line="103"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="producesNonNull" desc="()Lcom/luchersol/specialized_checkers/lambda/CheckerCallable;" line="119"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$producesNonNull$2" desc="(Ljava/util/concurrent/Callable;)Z" line="121"><counter type="INSTRUCTION" missed="3" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="2" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$producesExpected$1" desc="(Ljava/lang/Object;Ljava/util/concurrent/Callable;)Z" line="105"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$callWithoutException$0" desc="(Ljava/util/concurrent/Callable;)Z" line="88"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="3" covered="73"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="2" covered="20"/><counter type="COMPLEXITY" missed="0" covered="11"/><counter type="METHOD" missed="0" covered="10"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/luchersol/specialized_checkers/lambda/CheckerFunction" sourcefilename="CheckerFunction.java"><method name="&lt;init&gt;" desc="(Ljava/util/function/Function;Ljava/lang/String;)V" line="52"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/util/function/Function;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/lambda/CheckerFunction;" line="65"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/util/function/Function;)Lcom/luchersol/specialized_checkers/lambda/CheckerFunction;" line="77"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/lambda/CheckerFunction;" line="87"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="activateDeepClone" desc="()Lcom/luchersol/specialized_checkers/lambda/CheckerFunction;" line="99"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="deactivateDeepClone" desc="()Lcom/luchersol/specialized_checkers/lambda/CheckerFunction;" line="109"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getInput" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="120"><counter type="INSTRUCTION" missed="3" covered="5"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="applyWithoutException" desc="(Ljava/lang/Object;)Lcom/luchersol/specialized_checkers/lambda/CheckerFunction;" line="133"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="producesExpected" desc="(Ljava/lang/Object;Ljava/lang/Object;)Lcom/luchersol/specialized_checkers/lambda/CheckerFunction;" line="155"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="producesNonNull" desc="(Ljava/lang/Object;)Lcom/luchersol/specialized_checkers/lambda/CheckerFunction;" line="175"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$producesNonNull$2" desc="(Ljava/lang/Object;Ljava/util/function/Function;)Z" line="177"><counter type="INSTRUCTION" missed="3" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="2" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$producesExpected$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/Function;)Z" line="157"><counter type="INSTRUCTION" missed="3" covered="8"/><counter type="LINE" missed="2" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$applyWithoutException$0" desc="(Ljava/lang/Object;Ljava/util/function/Function;)Z" line="135"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="9" covered="114"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="4" covered="24"/><counter type="COMPLEXITY" missed="1" covered="14"/><counter type="METHOD" missed="0" covered="13"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/luchersol/specialized_checkers/lambda/CheckerConsumer" sourcefilename="CheckerConsumer.java"><method name="&lt;init&gt;" desc="(Ljava/util/function/Consumer;Ljava/lang/String;)V" line="50"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/util/function/Consumer;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/lambda/CheckerConsumer;" line="62"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/util/function/Consumer;)Lcom/luchersol/specialized_checkers/lambda/CheckerConsumer;" line="73"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/lambda/CheckerConsumer;" line="83"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="activateDeepClone" desc="()Lcom/luchersol/specialized_checkers/lambda/CheckerConsumer;" line="94"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="deactivateDeepClone" desc="()Lcom/luchersol/specialized_checkers/lambda/CheckerConsumer;" line="104"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getInput" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="115"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="applyWithoutException" desc="(Ljava/lang/Object;)Lcom/luchersol/specialized_checkers/lambda/CheckerConsumer;" line="126"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="applyWithoutException" desc="(Ljava/util/Collection;)Lcom/luchersol/specialized_checkers/lambda/CheckerConsumer;" line="144"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="modifiesInput" desc="(Ljava/lang/Object;Ljava/util/function/Predicate;)Lcom/luchersol/specialized_checkers/lambda/CheckerConsumer;" line="165"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="modifiesInput" desc="(Ljava/util/Collection;Ljava/util/function/Predicate;)Lcom/luchersol/specialized_checkers/lambda/CheckerConsumer;" line="184"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="doesNothing" desc="(Ljava/lang/Object;)Lcom/luchersol/specialized_checkers/lambda/CheckerConsumer;" line="204"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="doesNothing" desc="(Ljava/util/Collection;)Lcom/luchersol/specialized_checkers/lambda/CheckerConsumer;" line="223"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$doesNothing$8" desc="(Ljava/util/Collection;Ljava/util/function/Consumer;)Z" line="223"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$doesNothing$7" desc="(Ljava/util/function/Consumer;Ljava/lang/Object;)Z" line="225"><counter type="INSTRUCTION" missed="3" covered="14"/><counter type="LINE" missed="2" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$doesNothing$6" desc="(Ljava/lang/Object;Ljava/util/function/Consumer;)Z" line="206"><counter type="INSTRUCTION" missed="3" covered="14"/><counter type="LINE" missed="2" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$modifiesInput$5" desc="(Ljava/util/Collection;Ljava/util/function/Predicate;Ljava/util/function/Consumer;)Z" line="184"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$modifiesInput$4" desc="(Ljava/util/function/Consumer;Ljava/util/function/Predicate;Ljava/lang/Object;)Z" line="186"><counter type="INSTRUCTION" missed="3" covered="11"/><counter type="LINE" missed="2" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$modifiesInput$3" desc="(Ljava/lang/Object;Ljava/util/function/Predicate;Ljava/util/function/Consumer;)Z" line="167"><counter type="INSTRUCTION" missed="3" covered="11"/><counter type="LINE" missed="2" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$applyWithoutException$2" desc="(Ljava/util/Collection;Ljava/util/function/Consumer;)Z" line="144"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$applyWithoutException$1" desc="(Ljava/util/function/Consumer;Ljava/lang/Object;)Z" line="146"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$applyWithoutException$0" desc="(Ljava/lang/Object;Ljava/util/function/Consumer;)Z" line="128"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="12" covered="219"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="8" covered="46"/><counter type="COMPLEXITY" missed="0" covered="23"/><counter type="METHOD" missed="0" covered="22"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/luchersol/specialized_checkers/lambda/CheckerSupplier" sourcefilename="CheckerSupplier.java"><method name="&lt;init&gt;" desc="(Ljava/util/function/Supplier;Ljava/lang/String;)V" line="42"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/util/function/Supplier;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/lambda/CheckerSupplier;" line="54"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/util/function/Supplier;)Lcom/luchersol/specialized_checkers/lambda/CheckerSupplier;" line="65"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/lambda/CheckerSupplier;" line="75"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="applyWithoutException" desc="()Lcom/luchersol/specialized_checkers/lambda/CheckerSupplier;" line="84"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="producesExpected" desc="(Ljava/lang/Object;)Lcom/luchersol/specialized_checkers/lambda/CheckerSupplier;" line="101"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="producesNonNull" desc="()Lcom/luchersol/specialized_checkers/lambda/CheckerSupplier;" line="117"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$producesNonNull$2" desc="(Ljava/util/function/Supplier;)Z" line="119"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$producesExpected$1" desc="(Ljava/lang/Object;Ljava/util/function/Supplier;)Z" line="103"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$applyWithoutException$0" desc="(Ljava/util/function/Supplier;)Z" line="86"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="76"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="22"/><counter type="COMPLEXITY" missed="0" covered="11"/><counter type="METHOD" missed="0" covered="10"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/luchersol/specialized_checkers/lambda/CheckerBiFunction" sourcefilename="CheckerBiFunction.java"><method name="&lt;init&gt;" desc="(Ljava/util/function/BiFunction;Ljava/lang/String;)V" line="50"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/util/function/BiFunction;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/lambda/CheckerBiFunction;" line="64"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/util/function/BiFunction;)Lcom/luchersol/specialized_checkers/lambda/CheckerBiFunction;" line="77"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/lambda/CheckerBiFunction;" line="87"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="activateDeepClone" desc="()Lcom/luchersol/specialized_checkers/lambda/CheckerBiFunction;" line="96"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="deactivateDeepClone" desc="()Lcom/luchersol/specialized_checkers/lambda/CheckerBiFunction;" line="106"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getInput1" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="117"><counter type="INSTRUCTION" missed="3" covered="5"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getInput2" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="127"><counter type="INSTRUCTION" missed="3" covered="5"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="applyWithoutException" desc="(Ljava/lang/Object;Ljava/lang/Object;)Lcom/luchersol/specialized_checkers/lambda/CheckerBiFunction;" line="138"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="producesExpected" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/luchersol/specialized_checkers/lambda/CheckerBiFunction;" line="159"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="producesNonNull" desc="(Ljava/lang/Object;Ljava/lang/Object;)Lcom/luchersol/specialized_checkers/lambda/CheckerBiFunction;" line="179"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$producesNonNull$2" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Z" line="181"><counter type="INSTRUCTION" missed="3" covered="17"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="2" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$producesExpected$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Z" line="161"><counter type="INSTRUCTION" missed="3" covered="17"/><counter type="LINE" missed="2" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$applyWithoutException$0" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Z" line="140"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="12" covered="159"/><counter type="BRANCH" missed="2" covered="4"/><counter type="LINE" missed="4" covered="30"/><counter type="COMPLEXITY" missed="2" covered="15"/><counter type="METHOD" missed="0" covered="14"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/luchersol/specialized_checkers/lambda/CheckerBiPredicate" sourcefilename="CheckerBiPredicate.java"><method name="&lt;init&gt;" desc="(Ljava/util/function/BiPredicate;Ljava/lang/String;)V" line="35"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/util/function/BiPredicate;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/lambda/CheckerBiPredicate;" line="48"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/util/function/BiPredicate;)Lcom/luchersol/specialized_checkers/lambda/CheckerBiPredicate;" line="60"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/lambda/CheckerBiPredicate;" line="70"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="activateDeepClone" desc="()Lcom/luchersol/specialized_checkers/lambda/CheckerBiPredicate;" line="79"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="deactivateDeepClone" desc="()Lcom/luchersol/specialized_checkers/lambda/CheckerBiPredicate;" line="89"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getInput1" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="100"><counter type="INSTRUCTION" missed="3" covered="5"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getInput2" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="110"><counter type="INSTRUCTION" missed="3" covered="5"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="testWithoutException" desc="(Ljava/lang/Object;Ljava/lang/Object;)Lcom/luchersol/specialized_checkers/lambda/CheckerBiPredicate;" line="121"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="evaluatesTrue" desc="(Ljava/lang/Object;Ljava/lang/Object;)Lcom/luchersol/specialized_checkers/lambda/CheckerBiPredicate;" line="141"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="evaluatesFalse" desc="(Ljava/lang/Object;Ljava/lang/Object;)Lcom/luchersol/specialized_checkers/lambda/CheckerBiPredicate;" line="158"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="producesExpected" desc="(Ljava/lang/Object;Ljava/lang/Object;Z)Lcom/luchersol/specialized_checkers/lambda/CheckerBiPredicate;" line="176"><counter type="INSTRUCTION" missed="0" covered="27"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$producesExpected$3" desc="(Ljava/lang/Object;Ljava/lang/Object;ZLjava/util/function/BiPredicate;)Z" line="178"><counter type="INSTRUCTION" missed="4" covered="15"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="2" covered="2"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$evaluatesFalse$2" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiPredicate;)Z" line="160"><counter type="INSTRUCTION" missed="3" covered="13"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="2" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$evaluatesTrue$1" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiPredicate;)Z" line="143"><counter type="INSTRUCTION" missed="3" covered="9"/><counter type="LINE" missed="2" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$testWithoutException$0" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiPredicate;)Z" line="123"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="16" covered="184"/><counter type="BRANCH" missed="3" covered="5"/><counter type="LINE" missed="6" covered="29"/><counter type="COMPLEXITY" missed="3" covered="17"/><counter type="METHOD" missed="0" covered="16"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/luchersol/specialized_checkers/lambda/CheckerBiConsumer" sourcefilename="CheckerBiConsumer.java"><method name="&lt;init&gt;" desc="(Ljava/util/function/BiConsumer;Ljava/lang/String;)V" line="52"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/util/function/BiConsumer;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/lambda/CheckerBiConsumer;" line="65"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/util/function/BiConsumer;)Lcom/luchersol/specialized_checkers/lambda/CheckerBiConsumer;" line="77"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/lambda/CheckerBiConsumer;" line="87"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="activateDeepClone" desc="()Lcom/luchersol/specialized_checkers/lambda/CheckerBiConsumer;" line="97"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="deactivateDeepClone" desc="()Lcom/luchersol/specialized_checkers/lambda/CheckerBiConsumer;" line="107"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getInput1" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="118"><counter type="INSTRUCTION" missed="3" covered="5"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getInput2" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="128"><counter type="INSTRUCTION" missed="3" covered="5"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="applyWithoutException" desc="(Ljava/lang/Object;Ljava/lang/Object;)Lcom/luchersol/specialized_checkers/lambda/CheckerBiConsumer;" line="140"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="applyWithoutException" desc="(Ljava/util/Collection;)Lcom/luchersol/specialized_checkers/lambda/CheckerBiConsumer;" line="159"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="modifiesInput" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/Predicate;Ljava/util/function/Predicate;)Lcom/luchersol/specialized_checkers/lambda/CheckerBiConsumer;" line="182"><counter type="INSTRUCTION" missed="0" covered="23"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="modifiesInput" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiPredicate;)Lcom/luchersol/specialized_checkers/lambda/CheckerBiConsumer;" line="203"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="modifiesInput" desc="(Ljava/util/Collection;Ljava/util/function/Predicate;Ljava/util/function/Predicate;)Lcom/luchersol/specialized_checkers/lambda/CheckerBiConsumer;" line="224"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="modifiesInput" desc="(Ljava/util/Collection;Ljava/util/function/BiPredicate;)Lcom/luchersol/specialized_checkers/lambda/CheckerBiConsumer;" line="245"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="doesNothing" desc="(Ljava/lang/Object;Ljava/lang/Object;)Lcom/luchersol/specialized_checkers/lambda/CheckerBiConsumer;" line="266"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="doesNothing" desc="(Ljava/util/Collection;)Lcom/luchersol/specialized_checkers/lambda/CheckerBiConsumer;" line="287"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$doesNothing$11" desc="(Ljava/util/Collection;Ljava/util/function/BiConsumer;)Z" line="287"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$doesNothing$10" desc="(Ljava/util/function/BiConsumer;Ljava/util/Map$Entry;)Z" line="289"><counter type="INSTRUCTION" missed="4" covered="33"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="2" covered="6"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$doesNothing$9" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiConsumer;)Z" line="268"><counter type="INSTRUCTION" missed="4" covered="29"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="2" covered="6"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$modifiesInput$8" desc="(Ljava/util/Collection;Ljava/util/function/BiPredicate;Ljava/util/function/BiConsumer;)Z" line="245"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$modifiesInput$7" desc="(Ljava/util/function/BiConsumer;Ljava/util/function/BiPredicate;Ljava/util/Map$Entry;)Z" line="247"><counter type="INSTRUCTION" missed="3" covered="19"/><counter type="LINE" missed="2" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$modifiesInput$6" desc="(Ljava/util/Collection;Ljava/util/function/Predicate;Ljava/util/function/Predicate;Ljava/util/function/BiConsumer;)Z" line="224"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$modifiesInput$5" desc="(Ljava/util/function/BiConsumer;Ljava/util/function/Predicate;Ljava/util/function/Predicate;Ljava/util/Map$Entry;)Z" line="226"><counter type="INSTRUCTION" missed="4" covered="25"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="2" covered="4"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$modifiesInput$4" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiPredicate;Ljava/util/function/BiConsumer;)Z" line="205"><counter type="INSTRUCTION" missed="3" covered="17"/><counter type="LINE" missed="2" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$modifiesInput$3" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/Predicate;Ljava/util/function/Predicate;Ljava/util/function/BiConsumer;)Z" line="184"><counter type="INSTRUCTION" missed="4" covered="23"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="2" covered="4"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$applyWithoutException$2" desc="(Ljava/util/Collection;Ljava/util/function/BiConsumer;)Z" line="159"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$applyWithoutException$1" desc="(Ljava/util/function/BiConsumer;Ljava/util/Map$Entry;)Z" line="161"><counter type="INSTRUCTION" missed="3" covered="16"/><counter type="LINE" missed="2" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$applyWithoutException$0" desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiConsumer;)Z" line="142"><counter type="INSTRUCTION" missed="0" covered="17"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="31" covered="391"/><counter type="BRANCH" missed="10" covered="10"/><counter type="LINE" missed="14" covered="65"/><counter type="COMPLEXITY" missed="10" covered="28"/><counter type="METHOD" missed="0" covered="28"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/luchersol/specialized_checkers/lambda/CheckerRunnable" sourcefilename="CheckerRunnable.java"><method name="&lt;init&gt;" desc="(Ljava/lang/Runnable;Ljava/lang/String;)V" line="36"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/lang/Runnable;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/lambda/CheckerRunnable;" line="47"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/lang/Runnable;)Lcom/luchersol/specialized_checkers/lambda/CheckerRunnable;" line="57"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/lambda/CheckerRunnable;" line="67"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="runWithoutException" desc="()Lcom/luchersol/specialized_checkers/lambda/CheckerRunnable;" line="76"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$runWithoutException$0" desc="(Ljava/lang/Runnable;)Z" line="78"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="6"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/luchersol/specialized_checkers/lambda/CheckerPredicate" sourcefilename="CheckerPredicate.java"><method name="&lt;init&gt;" desc="(Ljava/util/function/Predicate;Ljava/lang/String;)V" line="53"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/util/function/Predicate;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/lambda/CheckerPredicate;" line="65"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/util/function/Predicate;)Lcom/luchersol/specialized_checkers/lambda/CheckerPredicate;" line="76"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/lambda/CheckerPredicate;" line="86"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="activateDeepClone" desc="()Lcom/luchersol/specialized_checkers/lambda/CheckerPredicate;" line="96"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="deactivateDeepClone" desc="()Lcom/luchersol/specialized_checkers/lambda/CheckerPredicate;" line="106"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getInput" desc="(Ljava/lang/Object;)Ljava/lang/Object;" line="117"><counter type="INSTRUCTION" missed="3" covered="5"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="testWithoutException" desc="(Ljava/lang/Object;)Lcom/luchersol/specialized_checkers/lambda/CheckerPredicate;" line="127"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="evaluatesTrue" desc="(Ljava/lang/Object;)Lcom/luchersol/specialized_checkers/lambda/CheckerPredicate;" line="145"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="evaluatesFalse" desc="(Ljava/lang/Object;)Lcom/luchersol/specialized_checkers/lambda/CheckerPredicate;" line="161"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="producesExpected" desc="(Ljava/lang/Object;Z)Lcom/luchersol/specialized_checkers/lambda/CheckerPredicate;" line="178"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$producesExpected$3" desc="(Ljava/lang/Object;ZLjava/util/function/Predicate;)Z" line="180"><counter type="INSTRUCTION" missed="3" covered="12"/><counter type="LINE" missed="2" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$evaluatesFalse$2" desc="(Ljava/lang/Object;Ljava/util/function/Predicate;)Z" line="163"><counter type="INSTRUCTION" missed="4" covered="9"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="2" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$evaluatesTrue$1" desc="(Ljava/lang/Object;Ljava/util/function/Predicate;)Z" line="147"><counter type="INSTRUCTION" missed="3" covered="6"/><counter type="LINE" missed="2" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$testWithoutException$0" desc="(Ljava/lang/Object;Ljava/util/function/Predicate;)Z" line="129"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="5"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="13" covered="144"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="6" covered="27"/><counter type="COMPLEXITY" missed="2" covered="15"/><counter type="METHOD" missed="0" covered="15"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="CheckerPredicate.java"><line nr="53" mi="0" ci="4" mb="0" cb="0"/><line nr="54" mi="0" ci="1" mb="0" cb="0"/><line nr="65" mi="0" ci="6" mb="0" cb="0"/><line nr="76" mi="0" ci="4" mb="0" cb="0"/><line nr="86" mi="0" ci="2" mb="0" cb="0"/><line nr="96" mi="0" ci="3" mb="0" cb="0"/><line nr="97" mi="0" ci="3" mb="0" cb="0"/><line nr="106" mi="0" ci="3" mb="0" cb="0"/><line nr="107" mi="0" ci="3" mb="0" cb="0"/><line nr="117" mi="3" ci="5" mb="1" cb="1"/><line nr="127" mi="0" ci="15" mb="0" cb="0"/><line nr="129" mi="0" ci="4" mb="0" cb="0"/><line nr="130" mi="0" ci="4" mb="0" cb="0"/><line nr="131" mi="0" ci="2" mb="0" cb="0"/><line nr="132" mi="0" ci="1" mb="0" cb="0"/><line nr="133" mi="0" ci="2" mb="0" cb="0"/><line nr="135" mi="0" ci="1" mb="0" cb="0"/><line nr="145" mi="0" ci="15" mb="0" cb="0"/><line nr="147" mi="0" ci="6" mb="0" cb="0"/><line nr="148" mi="1" ci="0" mb="0" cb="0"/><line nr="149" mi="2" ci="0" mb="0" cb="0"/><line nr="151" mi="0" ci="1" mb="0" cb="0"/><line nr="161" mi="0" ci="15" mb="0" cb="0"/><line nr="163" mi="1" ci="9" mb="1" cb="1"/><line nr="164" mi="1" ci="0" mb="0" cb="0"/><line nr="165" mi="2" ci="0" mb="0" cb="0"/><line nr="167" mi="0" ci="1" mb="0" cb="0"/><line nr="178" mi="0" ci="19" mb="0" cb="0"/><line nr="180" mi="0" ci="6" mb="0" cb="0"/><line nr="181" mi="0" ci="6" mb="0" cb="0"/><line nr="182" mi="1" ci="0" mb="0" cb="0"/><line nr="183" mi="2" ci="0" mb="0" cb="0"/><line nr="185" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="13" covered="144"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="6" covered="27"/><counter type="COMPLEXITY" missed="2" covered="15"/><counter type="METHOD" missed="0" covered="15"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="CheckerBiPredicate.java"><line nr="35" mi="0" ci="4" mb="0" cb="0"/><line nr="36" mi="0" ci="1" mb="0" cb="0"/><line nr="48" mi="0" ci="6" mb="0" cb="0"/><line nr="60" mi="0" ci="4" mb="0" cb="0"/><line nr="70" mi="0" ci="2" mb="0" cb="0"/><line nr="79" mi="0" ci="3" mb="0" cb="0"/><line nr="80" mi="0" ci="3" mb="0" cb="0"/><line nr="89" mi="0" ci="3" mb="0" cb="0"/><line nr="90" mi="0" ci="3" mb="0" cb="0"/><line nr="100" mi="3" ci="5" mb="1" cb="1"/><line nr="110" mi="3" ci="5" mb="1" cb="1"/><line nr="121" mi="0" ci="20" mb="0" cb="0"/><line nr="123" mi="0" ci="4" mb="0" cb="0"/><line nr="124" mi="0" ci="4" mb="0" cb="0"/><line nr="125" mi="0" ci="5" mb="0" cb="0"/><line nr="126" mi="0" ci="2" mb="0" cb="0"/><line nr="127" mi="0" ci="1" mb="0" cb="0"/><line nr="128" mi="0" ci="2" mb="0" cb="0"/><line nr="130" mi="0" ci="1" mb="0" cb="0"/><line nr="141" mi="0" ci="20" mb="0" cb="0"/><line nr="143" mi="0" ci="9" mb="0" cb="0"/><line nr="144" mi="1" ci="0" mb="0" cb="0"/><line nr="145" mi="2" ci="0" mb="0" cb="0"/><line nr="147" mi="0" ci="1" mb="0" cb="0"/><line nr="158" mi="0" ci="20" mb="0" cb="0"/><line nr="160" mi="0" ci="13" mb="0" cb="2"/><line nr="161" mi="1" ci="0" mb="0" cb="0"/><line nr="162" mi="2" ci="0" mb="0" cb="0"/><line nr="164" mi="0" ci="1" mb="0" cb="0"/><line nr="176" mi="0" ci="24" mb="0" cb="0"/><line nr="178" mi="0" ci="9" mb="0" cb="0"/><line nr="179" mi="1" ci="6" mb="1" cb="1"/><line nr="180" mi="1" ci="0" mb="0" cb="0"/><line nr="181" mi="2" ci="0" mb="0" cb="0"/><line nr="183" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="16" covered="184"/><counter type="BRANCH" missed="3" covered="5"/><counter type="LINE" missed="6" covered="29"/><counter type="COMPLEXITY" missed="3" covered="17"/><counter type="METHOD" missed="0" covered="16"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="CheckerRunnable.java"><line nr="36" mi="0" ci="4" mb="0" cb="0"/><line nr="37" mi="0" ci="1" mb="0" cb="0"/><line nr="47" mi="0" ci="6" mb="0" cb="0"/><line nr="57" mi="0" ci="4" mb="0" cb="0"/><line nr="67" mi="0" ci="2" mb="0" cb="0"/><line nr="76" mi="0" ci="7" mb="0" cb="0"/><line nr="78" mi="0" ci="2" mb="0" cb="0"/><line nr="79" mi="0" ci="2" mb="0" cb="0"/><line nr="80" mi="0" ci="1" mb="0" cb="0"/><line nr="81" mi="0" ci="2" mb="0" cb="0"/><line nr="83" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="LINE" missed="0" covered="11"/><counter type="COMPLEXITY" missed="0" covered="6"/><counter type="METHOD" missed="0" covered="6"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="CheckerConsumer.java"><line nr="50" mi="0" ci="4" mb="0" cb="0"/><line nr="51" mi="0" ci="1" mb="0" cb="0"/><line nr="62" mi="0" ci="6" mb="0" cb="0"/><line nr="73" mi="0" ci="4" mb="0" cb="0"/><line nr="83" mi="0" ci="2" mb="0" cb="0"/><line nr="94" mi="0" ci="3" mb="0" cb="0"/><line nr="95" mi="0" ci="3" mb="0" cb="0"/><line nr="104" mi="0" ci="3" mb="0" cb="0"/><line nr="105" mi="0" ci="3" mb="0" cb="0"/><line nr="115" mi="0" ci="8" mb="0" cb="2"/><line nr="126" mi="0" ci="9" mb="0" cb="0"/><line nr="128" mi="0" ci="4" mb="0" cb="0"/><line nr="129" mi="0" ci="3" mb="0" cb="0"/><line nr="130" mi="0" ci="2" mb="0" cb="0"/><line nr="131" mi="0" ci="1" mb="0" cb="0"/><line nr="132" mi="0" ci="2" mb="0" cb="0"/><line nr="134" mi="0" ci="1" mb="0" cb="0"/><line nr="144" mi="0" ci="16" mb="0" cb="0"/><line nr="146" mi="0" ci="4" mb="0" cb="0"/><line nr="147" mi="0" ci="3" mb="0" cb="0"/><line nr="148" mi="0" ci="2" mb="0" cb="0"/><line nr="149" mi="0" ci="1" mb="0" cb="0"/><line nr="150" mi="0" ci="2" mb="0" cb="0"/><line nr="154" mi="0" ci="1" mb="0" cb="0"/><line nr="165" mi="0" ci="16" mb="0" cb="0"/><line nr="167" mi="0" ci="4" mb="0" cb="0"/><line nr="168" mi="0" ci="3" mb="0" cb="0"/><line nr="169" mi="0" ci="4" mb="0" cb="0"/><line nr="170" mi="1" ci="0" mb="0" cb="0"/><line nr="171" mi="2" ci="0" mb="0" cb="0"/><line nr="173" mi="0" ci="1" mb="0" cb="0"/><line nr="184" mi="0" ci="24" mb="0" cb="0"/><line nr="186" mi="0" ci="4" mb="0" cb="0"/><line nr="187" mi="0" ci="3" mb="0" cb="0"/><line nr="188" mi="0" ci="4" mb="0" cb="0"/><line nr="189" mi="1" ci="0" mb="0" cb="0"/><line nr="190" mi="2" ci="0" mb="0" cb="0"/><line nr="194" mi="0" ci="1" mb="0" cb="0"/><line nr="204" mi="0" ci="15" mb="0" cb="0"/><line nr="206" mi="0" ci="3" mb="0" cb="0"/><line nr="207" mi="0" ci="4" mb="0" cb="0"/><line nr="208" mi="0" ci="3" mb="0" cb="0"/><line nr="209" mi="0" ci="4" mb="0" cb="0"/><line nr="210" mi="1" ci="0" mb="0" cb="0"/><line nr="211" mi="2" ci="0" mb="0" cb="0"/><line nr="213" mi="0" ci="1" mb="0" cb="0"/><line nr="223" mi="0" ci="22" mb="0" cb="0"/><line nr="225" mi="0" ci="3" mb="0" cb="0"/><line nr="226" mi="0" ci="4" mb="0" cb="0"/><line nr="227" mi="0" ci="3" mb="0" cb="0"/><line nr="228" mi="0" ci="4" mb="0" cb="0"/><line nr="229" mi="1" ci="0" mb="0" cb="0"/><line nr="230" mi="2" ci="0" mb="0" cb="0"/><line nr="234" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="12" covered="219"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="8" covered="46"/><counter type="COMPLEXITY" missed="0" covered="23"/><counter type="METHOD" missed="0" covered="22"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="CheckerBiFunction.java"><line nr="50" mi="0" ci="4" mb="0" cb="0"/><line nr="51" mi="0" ci="1" mb="0" cb="0"/><line nr="64" mi="0" ci="6" mb="0" cb="0"/><line nr="77" mi="0" ci="4" mb="0" cb="0"/><line nr="87" mi="0" ci="2" mb="0" cb="0"/><line nr="96" mi="0" ci="3" mb="0" cb="0"/><line nr="97" mi="0" ci="3" mb="0" cb="0"/><line nr="106" mi="0" ci="3" mb="0" cb="0"/><line nr="107" mi="0" ci="3" mb="0" cb="0"/><line nr="117" mi="3" ci="5" mb="1" cb="1"/><line nr="127" mi="3" ci="5" mb="1" cb="1"/><line nr="138" mi="0" ci="20" mb="0" cb="0"/><line nr="140" mi="0" ci="4" mb="0" cb="0"/><line nr="141" mi="0" ci="4" mb="0" cb="0"/><line nr="142" mi="0" ci="5" mb="0" cb="0"/><line nr="143" mi="0" ci="2" mb="0" cb="0"/><line nr="144" mi="0" ci="1" mb="0" cb="0"/><line nr="145" mi="0" ci="2" mb="0" cb="0"/><line nr="147" mi="0" ci="1" mb="0" cb="0"/><line nr="159" mi="0" ci="25" mb="0" cb="0"/><line nr="161" mi="0" ci="4" mb="0" cb="0"/><line nr="162" mi="0" ci="4" mb="0" cb="0"/><line nr="163" mi="0" ci="5" mb="0" cb="0"/><line nr="164" mi="0" ci="4" mb="0" cb="0"/><line nr="165" mi="1" ci="0" mb="0" cb="0"/><line nr="166" mi="2" ci="0" mb="0" cb="0"/><line nr="168" mi="0" ci="1" mb="0" cb="0"/><line nr="179" mi="0" ci="20" mb="0" cb="0"/><line nr="181" mi="0" ci="4" mb="0" cb="0"/><line nr="182" mi="0" ci="4" mb="0" cb="0"/><line nr="183" mi="0" ci="9" mb="0" cb="2"/><line nr="184" mi="1" ci="0" mb="0" cb="0"/><line nr="185" mi="2" ci="0" mb="0" cb="0"/><line nr="187" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="12" covered="159"/><counter type="BRANCH" missed="2" covered="4"/><counter type="LINE" missed="4" covered="30"/><counter type="COMPLEXITY" missed="2" covered="15"/><counter type="METHOD" missed="0" covered="14"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="CheckerFunction.java"><line nr="52" mi="0" ci="4" mb="0" cb="0"/><line nr="53" mi="0" ci="1" mb="0" cb="0"/><line nr="65" mi="0" ci="6" mb="0" cb="0"/><line nr="77" mi="0" ci="4" mb="0" cb="0"/><line nr="87" mi="0" ci="2" mb="0" cb="0"/><line nr="99" mi="0" ci="3" mb="0" cb="0"/><line nr="100" mi="0" ci="3" mb="0" cb="0"/><line nr="109" mi="0" ci="3" mb="0" cb="0"/><line nr="110" mi="0" ci="3" mb="0" cb="0"/><line nr="120" mi="3" ci="5" mb="1" cb="1"/><line nr="133" mi="0" ci="15" mb="0" cb="0"/><line nr="135" mi="0" ci="4" mb="0" cb="0"/><line nr="136" mi="0" ci="4" mb="0" cb="0"/><line nr="137" mi="0" ci="2" mb="0" cb="0"/><line nr="138" mi="0" ci="1" mb="0" cb="0"/><line nr="139" mi="0" ci="2" mb="0" cb="0"/><line nr="141" mi="0" ci="1" mb="0" cb="0"/><line nr="155" mi="0" ci="19" mb="0" cb="0"/><line nr="157" mi="0" ci="4" mb="0" cb="0"/><line nr="158" mi="0" ci="4" mb="0" cb="0"/><line nr="159" mi="1" ci="0" mb="0" cb="0"/><line nr="160" mi="2" ci="0" mb="0" cb="0"/><line nr="162" mi="0" ci="1" mb="0" cb="0"/><line nr="175" mi="0" ci="14" mb="0" cb="0"/><line nr="177" mi="0" ci="8" mb="0" cb="2"/><line nr="178" mi="1" ci="0" mb="0" cb="0"/><line nr="179" mi="2" ci="0" mb="0" cb="0"/><line nr="181" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="9" covered="114"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="4" covered="24"/><counter type="COMPLEXITY" missed="1" covered="14"/><counter type="METHOD" missed="0" covered="13"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="CheckerCallable.java"><line nr="44" mi="0" ci="4" mb="0" cb="0"/><line nr="45" mi="0" ci="1" mb="0" cb="0"/><line nr="56" mi="0" ci="6" mb="0" cb="0"/><line nr="67" mi="0" ci="4" mb="0" cb="0"/><line nr="77" mi="0" ci="2" mb="0" cb="0"/><line nr="86" mi="0" ci="7" mb="0" cb="0"/><line nr="88" mi="0" ci="3" mb="0" cb="0"/><line nr="89" mi="0" ci="2" mb="0" cb="0"/><line nr="90" mi="0" ci="1" mb="0" cb="0"/><line nr="91" mi="0" ci="2" mb="0" cb="0"/><line nr="93" mi="0" ci="1" mb="0" cb="0"/><line nr="103" mi="0" ci="14" mb="0" cb="0"/><line nr="105" mi="0" ci="3" mb="0" cb="0"/><line nr="106" mi="0" ci="4" mb="0" cb="0"/><line nr="107" mi="0" ci="1" mb="0" cb="0"/><line nr="108" mi="0" ci="2" mb="0" cb="0"/><line nr="110" mi="0" ci="1" mb="0" cb="0"/><line nr="119" mi="0" ci="7" mb="0" cb="0"/><line nr="121" mi="0" ci="7" mb="0" cb="2"/><line nr="122" mi="1" ci="0" mb="0" cb="0"/><line nr="123" mi="2" ci="0" mb="0" cb="0"/><line nr="125" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="3" covered="73"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="2" covered="20"/><counter type="COMPLEXITY" missed="0" covered="11"/><counter type="METHOD" missed="0" covered="10"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="CheckerSupplier.java"><line nr="42" mi="0" ci="4" mb="0" cb="0"/><line nr="43" mi="0" ci="1" mb="0" cb="0"/><line nr="54" mi="0" ci="6" mb="0" cb="0"/><line nr="65" mi="0" ci="4" mb="0" cb="0"/><line nr="75" mi="0" ci="2" mb="0" cb="0"/><line nr="84" mi="0" ci="7" mb="0" cb="0"/><line nr="86" mi="0" ci="3" mb="0" cb="0"/><line nr="87" mi="0" ci="2" mb="0" cb="0"/><line nr="88" mi="0" ci="1" mb="0" cb="0"/><line nr="89" mi="0" ci="2" mb="0" cb="0"/><line nr="91" mi="0" ci="1" mb="0" cb="0"/><line nr="101" mi="0" ci="14" mb="0" cb="0"/><line nr="103" mi="0" ci="3" mb="0" cb="0"/><line nr="104" mi="0" ci="4" mb="0" cb="0"/><line nr="105" mi="0" ci="1" mb="0" cb="0"/><line nr="106" mi="0" ci="2" mb="0" cb="0"/><line nr="108" mi="0" ci="1" mb="0" cb="0"/><line nr="117" mi="0" ci="7" mb="0" cb="0"/><line nr="119" mi="0" ci="7" mb="0" cb="2"/><line nr="120" mi="0" ci="1" mb="0" cb="0"/><line nr="121" mi="0" ci="2" mb="0" cb="0"/><line nr="123" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="0" covered="76"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="22"/><counter type="COMPLEXITY" missed="0" covered="11"/><counter type="METHOD" missed="0" covered="10"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="CheckerBiConsumer.java"><line nr="52" mi="0" ci="4" mb="0" cb="0"/><line nr="53" mi="0" ci="1" mb="0" cb="0"/><line nr="65" mi="0" ci="6" mb="0" cb="0"/><line nr="77" mi="0" ci="4" mb="0" cb="0"/><line nr="87" mi="0" ci="2" mb="0" cb="0"/><line nr="97" mi="0" ci="3" mb="0" cb="0"/><line nr="98" mi="0" ci="3" mb="0" cb="0"/><line nr="107" mi="0" ci="3" mb="0" cb="0"/><line nr="108" mi="0" ci="3" mb="0" cb="0"/><line nr="118" mi="3" ci="5" mb="1" cb="1"/><line nr="128" mi="3" ci="5" mb="1" cb="1"/><line nr="140" mi="0" ci="20" mb="0" cb="0"/><line nr="142" mi="0" ci="4" mb="0" cb="0"/><line nr="143" mi="0" ci="4" mb="0" cb="0"/><line nr="144" mi="0" ci="4" mb="0" cb="0"/><line nr="145" mi="0" ci="2" mb="0" cb="0"/><line nr="146" mi="0" ci="1" mb="0" cb="0"/><line nr="147" mi="0" ci="2" mb="0" cb="0"/><line nr="149" mi="0" ci="1" mb="0" cb="0"/><line nr="159" mi="0" ci="16" mb="0" cb="0"/><line nr="161" mi="0" ci="5" mb="0" cb="0"/><line nr="162" mi="0" ci="5" mb="0" cb="0"/><line nr="163" mi="0" ci="4" mb="0" cb="0"/><line nr="164" mi="0" ci="2" mb="0" cb="0"/><line nr="165" mi="1" ci="0" mb="0" cb="0"/><line nr="166" mi="2" ci="0" mb="0" cb="0"/><line nr="169" mi="0" ci="1" mb="0" cb="0"/><line nr="182" mi="0" ci="22" mb="0" cb="0"/><line nr="184" mi="0" ci="4" mb="0" cb="0"/><line nr="185" mi="0" ci="4" mb="0" cb="0"/><line nr="186" mi="0" ci="4" mb="0" cb="0"/><line nr="187" mi="1" ci="11" mb="2" cb="2"/><line nr="188" mi="1" ci="0" mb="0" cb="0"/><line nr="189" mi="2" ci="0" mb="0" cb="0"/><line nr="191" mi="0" ci="1" mb="0" cb="0"/><line nr="203" mi="0" ci="21" mb="0" cb="0"/><line nr="205" mi="0" ci="4" mb="0" cb="0"/><line nr="206" mi="0" ci="4" mb="0" cb="0"/><line nr="207" mi="0" ci="4" mb="0" cb="0"/><line nr="208" mi="0" ci="5" mb="0" cb="0"/><line nr="209" mi="1" ci="0" mb="0" cb="0"/><line nr="210" mi="2" ci="0" mb="0" cb="0"/><line nr="212" mi="0" ci="1" mb="0" cb="0"/><line nr="224" mi="0" ci="26" mb="0" cb="0"/><line nr="226" mi="0" ci="5" mb="0" cb="0"/><line nr="227" mi="0" ci="5" mb="0" cb="0"/><line nr="228" mi="0" ci="4" mb="0" cb="0"/><line nr="229" mi="1" ci="11" mb="2" cb="2"/><line nr="230" mi="1" ci="0" mb="0" cb="0"/><line nr="231" mi="2" ci="0" mb="0" cb="0"/><line nr="234" mi="0" ci="1" mb="0" cb="0"/><line nr="245" mi="0" ci="24" mb="0" cb="0"/><line nr="247" mi="0" ci="5" mb="0" cb="0"/><line nr="248" mi="0" ci="5" mb="0" cb="0"/><line nr="249" mi="0" ci="4" mb="0" cb="0"/><line nr="250" mi="0" ci="5" mb="0" cb="0"/><line nr="251" mi="1" ci="0" mb="0" cb="0"/><line nr="252" mi="2" ci="0" mb="0" cb="0"/><line nr="255" mi="0" ci="1" mb="0" cb="0"/><line nr="266" mi="0" ci="20" mb="0" cb="0"/><line nr="268" mi="0" ci="3" mb="0" cb="0"/><line nr="269" mi="0" ci="4" mb="0" cb="0"/><line nr="270" mi="0" ci="3" mb="0" cb="0"/><line nr="271" mi="0" ci="4" mb="0" cb="0"/><line nr="272" mi="0" ci="4" mb="0" cb="0"/><line nr="273" mi="1" ci="11" mb="2" cb="2"/><line nr="274" mi="1" ci="0" mb="0" cb="0"/><line nr="275" mi="2" ci="0" mb="0" cb="0"/><line nr="277" mi="0" ci="1" mb="0" cb="0"/><line nr="287" mi="0" ci="16" mb="0" cb="0"/><line nr="289" mi="0" ci="4" mb="0" cb="0"/><line nr="290" mi="0" ci="5" mb="0" cb="0"/><line nr="291" mi="0" ci="4" mb="0" cb="0"/><line nr="292" mi="0" ci="5" mb="0" cb="0"/><line nr="293" mi="0" ci="4" mb="0" cb="0"/><line nr="294" mi="1" ci="11" mb="2" cb="2"/><line nr="295" mi="1" ci="0" mb="0" cb="0"/><line nr="296" mi="2" ci="0" mb="0" cb="0"/><line nr="300" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="31" covered="391"/><counter type="BRANCH" missed="10" covered="10"/><counter type="LINE" missed="14" covered="65"/><counter type="COMPLEXITY" missed="10" covered="28"/><counter type="METHOD" missed="0" covered="28"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="96" covered="1392"/><counter type="BRANCH" missed="18" covered="30"/><counter type="LINE" missed="44" covered="274"/><counter type="COMPLEXITY" missed="18" covered="140"/><counter type="METHOD" missed="0" covered="134"/><counter type="CLASS" missed="0" covered="9"/></package><package name="com/luchersol/specialized_checkers/time/temporal"><class name="com/luchersol/specialized_checkers/time/temporal/CheckerDate" sourcefilename="CheckerDate.java"><method name="&lt;init&gt;" desc="(Ljava/util/Date;Ljava/lang/String;)V" line="44"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/util/Date;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/time/temporal/CheckerDate;" line="55"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="(Ljava/util/Date;)Lcom/luchersol/specialized_checkers/time/temporal/CheckerDate;" line="65"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/time/temporal/CheckerDate;" line="75"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="now" desc="()Ljava/util/Date;" line="84"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isBefore" desc="(Ljava/util/Date;)Lcom/luchersol/specialized_checkers/time/temporal/CheckerDate;" line="95"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isBeforeOrEqual" desc="(Ljava/util/Date;)Lcom/luchersol/specialized_checkers/time/temporal/CheckerDate;" line="106"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isAfter" desc="(Ljava/util/Date;)Lcom/luchersol/specialized_checkers/time/temporal/CheckerDate;" line="117"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isAfterOrEqual" desc="(Ljava/util/Date;)Lcom/luchersol/specialized_checkers/time/temporal/CheckerDate;" line="128"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="inRange" desc="(Ljava/util/Date;Ljava/util/Date;)Lcom/luchersol/specialized_checkers/time/temporal/CheckerDate;" line="140"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isPast" desc="()Lcom/luchersol/specialized_checkers/time/temporal/CheckerDate;" line="150"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isFuture" desc="()Lcom/luchersol/specialized_checkers/time/temporal/CheckerDate;" line="160"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isFuture$6" desc="(Ljava/util/Date;)Z" line="160"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isPast$5" desc="(Ljava/util/Date;)Z" line="150"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$inRange$4" desc="(Ljava/util/Date;Ljava/util/Date;Ljava/util/Date;)Z" line="140"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isAfterOrEqual$3" desc="(Ljava/util/Date;Ljava/util/Date;)Z" line="128"><counter type="INSTRUCTION" missed="1" covered="11"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isAfter$2" desc="(Ljava/util/Date;Ljava/util/Date;)Z" line="117"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isBeforeOrEqual$1" desc="(Ljava/util/Date;Ljava/util/Date;)Z" line="106"><counter type="INSTRUCTION" missed="1" covered="11"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isBefore$0" desc="(Ljava/util/Date;Ljava/util/Date;)Z" line="95"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="12" covered="189"/><counter type="BRANCH" missed="5" covered="7"/><counter type="LINE" missed="2" covered="11"/><counter type="COMPLEXITY" missed="7" covered="18"/><counter type="METHOD" missed="2" covered="17"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/luchersol/specialized_checkers/time/temporal/CheckerLocalDate" sourcefilename="CheckerLocalDate.java"><method name="&lt;init&gt;" desc="(Ljava/time/LocalDate;Ljava/lang/String;)V" line="45"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/time/LocalDate;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/time/temporal/CheckerLocalDate;" line="56"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="(Ljava/time/LocalDate;)Lcom/luchersol/specialized_checkers/time/temporal/CheckerLocalDate;" line="66"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/time/temporal/CheckerLocalDate;" line="76"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="now" desc="()Ljava/time/LocalDate;" line="85"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isBefore" desc="(Ljava/time/LocalDate;)Lcom/luchersol/specialized_checkers/time/temporal/CheckerLocalDate;" line="96"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isBeforeOrEqual" desc="(Ljava/time/LocalDate;)Lcom/luchersol/specialized_checkers/time/temporal/CheckerLocalDate;" line="107"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isAfter" desc="(Ljava/time/LocalDate;)Lcom/luchersol/specialized_checkers/time/temporal/CheckerLocalDate;" line="118"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isAfterOrEqual" desc="(Ljava/time/LocalDate;)Lcom/luchersol/specialized_checkers/time/temporal/CheckerLocalDate;" line="129"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="inRange" desc="(Ljava/time/LocalDate;Ljava/time/LocalDate;)Lcom/luchersol/specialized_checkers/time/temporal/CheckerLocalDate;" line="141"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isPast" desc="()Lcom/luchersol/specialized_checkers/time/temporal/CheckerLocalDate;" line="151"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isFuture" desc="()Lcom/luchersol/specialized_checkers/time/temporal/CheckerLocalDate;" line="161"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isPastOrPresent" desc="()Lcom/luchersol/specialized_checkers/time/temporal/CheckerLocalDate;" line="170"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isFutureOrPresent" desc="()Lcom/luchersol/specialized_checkers/time/temporal/CheckerLocalDate;" line="179"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isFutureOrPresent$8" desc="(Ljava/time/LocalDate;)Z" line="179"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isPastOrPresent$7" desc="(Ljava/time/LocalDate;)Z" line="170"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isFuture$6" desc="(Ljava/time/LocalDate;)Z" line="161"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isPast$5" desc="(Ljava/time/LocalDate;)Z" line="151"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$inRange$4" desc="(Ljava/time/LocalDate;Ljava/time/LocalDate;Ljava/time/LocalDate;)Z" line="141"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isAfterOrEqual$3" desc="(Ljava/time/LocalDate;Ljava/time/LocalDate;)Z" line="129"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isAfter$2" desc="(Ljava/time/LocalDate;Ljava/time/LocalDate;)Z" line="118"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isBeforeOrEqual$1" desc="(Ljava/time/LocalDate;Ljava/time/LocalDate;)Z" line="107"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isBefore$0" desc="(Ljava/time/LocalDate;Ljava/time/LocalDate;)Z" line="96"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="10" covered="233"/><counter type="BRANCH" missed="0" covered="16"/><counter type="LINE" missed="2" covered="13"/><counter type="COMPLEXITY" missed="2" covered="29"/><counter type="METHOD" missed="2" covered="21"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/luchersol/specialized_checkers/time/temporal/CheckerLocalDateTime" sourcefilename="CheckerLocalDateTime.java"><method name="&lt;init&gt;" desc="(Ljava/time/LocalDateTime;Ljava/lang/String;)V" line="44"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/time/LocalDateTime;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/time/temporal/CheckerLocalDateTime;" line="55"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="(Ljava/time/LocalDateTime;)Lcom/luchersol/specialized_checkers/time/temporal/CheckerLocalDateTime;" line="65"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/time/temporal/CheckerLocalDateTime;" line="75"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="now" desc="()Ljava/time/LocalDateTime;" line="84"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isBefore" desc="(Ljava/time/LocalDateTime;)Lcom/luchersol/specialized_checkers/time/temporal/CheckerLocalDateTime;" line="95"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isBeforeOrEqual" desc="(Ljava/time/LocalDateTime;)Lcom/luchersol/specialized_checkers/time/temporal/CheckerLocalDateTime;" line="106"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isAfter" desc="(Ljava/time/LocalDateTime;)Lcom/luchersol/specialized_checkers/time/temporal/CheckerLocalDateTime;" line="117"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isAfterOrEqual" desc="(Ljava/time/LocalDateTime;)Lcom/luchersol/specialized_checkers/time/temporal/CheckerLocalDateTime;" line="128"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="inRange" desc="(Ljava/time/LocalDateTime;Ljava/time/LocalDateTime;)Lcom/luchersol/specialized_checkers/time/temporal/CheckerLocalDateTime;" line="140"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isPast" desc="()Lcom/luchersol/specialized_checkers/time/temporal/CheckerLocalDateTime;" line="150"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isFuture" desc="()Lcom/luchersol/specialized_checkers/time/temporal/CheckerLocalDateTime;" line="160"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isFuture$6" desc="(Ljava/time/LocalDateTime;)Z" line="160"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isPast$5" desc="(Ljava/time/LocalDateTime;)Z" line="150"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$inRange$4" desc="(Ljava/time/LocalDateTime;Ljava/time/LocalDateTime;Ljava/time/LocalDateTime;)Z" line="140"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isAfterOrEqual$3" desc="(Ljava/time/LocalDateTime;Ljava/time/LocalDateTime;)Z" line="128"><counter type="INSTRUCTION" missed="1" covered="11"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isAfter$2" desc="(Ljava/time/LocalDateTime;Ljava/time/LocalDateTime;)Z" line="117"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isBeforeOrEqual$1" desc="(Ljava/time/LocalDateTime;Ljava/time/LocalDateTime;)Z" line="106"><counter type="INSTRUCTION" missed="1" covered="11"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isBefore$0" desc="(Ljava/time/LocalDateTime;Ljava/time/LocalDateTime;)Z" line="95"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="12" covered="187"/><counter type="BRANCH" missed="5" covered="7"/><counter type="LINE" missed="2" covered="11"/><counter type="COMPLEXITY" missed="7" covered="18"/><counter type="METHOD" missed="2" covered="17"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/luchersol/specialized_checkers/time/temporal/InterfaceCheckerDate" sourcefilename="InterfaceCheckerDate.java"/><class name="com/luchersol/specialized_checkers/time/temporal/CheckerLocalTime" sourcefilename="CheckerLocalTime.java"><method name="&lt;init&gt;" desc="(Ljava/time/LocalTime;Ljava/lang/String;)V" line="44"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/time/LocalTime;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/time/temporal/CheckerLocalTime;" line="55"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="(Ljava/time/LocalTime;)Lcom/luchersol/specialized_checkers/time/temporal/CheckerLocalTime;" line="65"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/time/temporal/CheckerLocalTime;" line="75"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="now" desc="()Ljava/time/LocalTime;" line="84"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isBefore" desc="(Ljava/time/LocalTime;)Lcom/luchersol/specialized_checkers/time/temporal/CheckerLocalTime;" line="95"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isBeforeOrEqual" desc="(Ljava/time/LocalTime;)Lcom/luchersol/specialized_checkers/time/temporal/CheckerLocalTime;" line="106"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isAfter" desc="(Ljava/time/LocalTime;)Lcom/luchersol/specialized_checkers/time/temporal/CheckerLocalTime;" line="117"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isAfterOrEqual" desc="(Ljava/time/LocalTime;)Lcom/luchersol/specialized_checkers/time/temporal/CheckerLocalTime;" line="128"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="inRange" desc="(Ljava/time/LocalTime;Ljava/time/LocalTime;)Lcom/luchersol/specialized_checkers/time/temporal/CheckerLocalTime;" line="140"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isPast" desc="()Lcom/luchersol/specialized_checkers/time/temporal/CheckerLocalTime;" line="150"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isFuture" desc="()Lcom/luchersol/specialized_checkers/time/temporal/CheckerLocalTime;" line="160"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isFuture$6" desc="(Ljava/time/LocalTime;)Z" line="160"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isPast$5" desc="(Ljava/time/LocalTime;)Z" line="150"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$inRange$4" desc="(Ljava/time/LocalTime;Ljava/time/LocalTime;Ljava/time/LocalTime;)Z" line="140"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isAfterOrEqual$3" desc="(Ljava/time/LocalTime;Ljava/time/LocalTime;)Z" line="128"><counter type="INSTRUCTION" missed="1" covered="11"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isAfter$2" desc="(Ljava/time/LocalTime;Ljava/time/LocalTime;)Z" line="117"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isBeforeOrEqual$1" desc="(Ljava/time/LocalTime;Ljava/time/LocalTime;)Z" line="106"><counter type="INSTRUCTION" missed="1" covered="11"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isBefore$0" desc="(Ljava/time/LocalTime;Ljava/time/LocalTime;)Z" line="95"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="12" covered="187"/><counter type="BRANCH" missed="3" covered="9"/><counter type="LINE" missed="2" covered="11"/><counter type="COMPLEXITY" missed="5" covered="20"/><counter type="METHOD" missed="2" covered="17"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="CheckerDate.java"><line nr="44" mi="0" ci="4" mb="0" cb="0"/><line nr="45" mi="0" ci="1" mb="0" cb="0"/><line nr="55" mi="6" ci="0" mb="0" cb="0"/><line nr="65" mi="4" ci="0" mb="0" cb="0"/><line nr="75" mi="0" ci="2" mb="0" cb="0"/><line nr="84" mi="0" ci="4" mb="0" cb="0"/><line nr="95" mi="0" ci="23" mb="0" cb="0"/><line nr="106" mi="1" ci="30" mb="2" cb="2"/><line nr="117" mi="0" ci="23" mb="0" cb="0"/><line nr="128" mi="1" ci="30" mb="2" cb="2"/><line nr="140" mi="0" ci="36" mb="1" cb="3"/><line nr="150" mi="0" ci="18" mb="0" cb="0"/><line nr="160" mi="0" ci="18" mb="0" cb="0"/><counter type="INSTRUCTION" missed="12" covered="189"/><counter type="BRANCH" missed="5" covered="7"/><counter type="LINE" missed="2" covered="11"/><counter type="COMPLEXITY" missed="7" covered="18"/><counter type="METHOD" missed="2" covered="17"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="InterfaceCheckerDate.java"/><sourcefile name="CheckerLocalTime.java"><line nr="44" mi="0" ci="4" mb="0" cb="0"/><line nr="45" mi="0" ci="1" mb="0" cb="0"/><line nr="55" mi="6" ci="0" mb="0" cb="0"/><line nr="65" mi="4" ci="0" mb="0" cb="0"/><line nr="75" mi="0" ci="2" mb="0" cb="0"/><line nr="84" mi="0" ci="2" mb="0" cb="0"/><line nr="95" mi="0" ci="23" mb="0" cb="0"/><line nr="106" mi="1" ci="30" mb="1" cb="3"/><line nr="117" mi="0" ci="23" mb="0" cb="0"/><line nr="128" mi="1" ci="30" mb="1" cb="3"/><line nr="140" mi="0" ci="36" mb="1" cb="3"/><line nr="150" mi="0" ci="18" mb="0" cb="0"/><line nr="160" mi="0" ci="18" mb="0" cb="0"/><counter type="INSTRUCTION" missed="12" covered="187"/><counter type="BRANCH" missed="3" covered="9"/><counter type="LINE" missed="2" covered="11"/><counter type="COMPLEXITY" missed="5" covered="20"/><counter type="METHOD" missed="2" covered="17"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="CheckerLocalDate.java"><line nr="45" mi="0" ci="4" mb="0" cb="0"/><line nr="46" mi="0" ci="1" mb="0" cb="0"/><line nr="56" mi="6" ci="0" mb="0" cb="0"/><line nr="66" mi="4" ci="0" mb="0" cb="0"/><line nr="76" mi="0" ci="2" mb="0" cb="0"/><line nr="85" mi="0" ci="2" mb="0" cb="0"/><line nr="96" mi="0" ci="23" mb="0" cb="0"/><line nr="107" mi="0" ci="31" mb="0" cb="4"/><line nr="118" mi="0" ci="23" mb="0" cb="0"/><line nr="129" mi="0" ci="31" mb="0" cb="4"/><line nr="141" mi="0" ci="36" mb="0" cb="4"/><line nr="151" mi="0" ci="18" mb="0" cb="0"/><line nr="161" mi="0" ci="18" mb="0" cb="0"/><line nr="170" mi="0" ci="22" mb="0" cb="2"/><line nr="179" mi="0" ci="22" mb="0" cb="2"/><counter type="INSTRUCTION" missed="10" covered="233"/><counter type="BRANCH" missed="0" covered="16"/><counter type="LINE" missed="2" covered="13"/><counter type="COMPLEXITY" missed="2" covered="29"/><counter type="METHOD" missed="2" covered="21"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="CheckerLocalDateTime.java"><line nr="44" mi="0" ci="4" mb="0" cb="0"/><line nr="45" mi="0" ci="1" mb="0" cb="0"/><line nr="55" mi="6" ci="0" mb="0" cb="0"/><line nr="65" mi="4" ci="0" mb="0" cb="0"/><line nr="75" mi="0" ci="2" mb="0" cb="0"/><line nr="84" mi="0" ci="2" mb="0" cb="0"/><line nr="95" mi="0" ci="23" mb="0" cb="0"/><line nr="106" mi="1" ci="30" mb="2" cb="2"/><line nr="117" mi="0" ci="23" mb="0" cb="0"/><line nr="128" mi="1" ci="30" mb="2" cb="2"/><line nr="140" mi="0" ci="36" mb="1" cb="3"/><line nr="150" mi="0" ci="18" mb="0" cb="0"/><line nr="160" mi="0" ci="18" mb="0" cb="0"/><counter type="INSTRUCTION" missed="12" covered="187"/><counter type="BRANCH" missed="5" covered="7"/><counter type="LINE" missed="2" covered="11"/><counter type="COMPLEXITY" missed="7" covered="18"/><counter type="METHOD" missed="2" covered="17"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="46" covered="796"/><counter type="BRANCH" missed="13" covered="39"/><counter type="LINE" missed="8" covered="46"/><counter type="COMPLEXITY" missed="21" covered="85"/><counter type="METHOD" missed="8" covered="72"/><counter type="CLASS" missed="0" covered="4"/></package><package name="com/luchersol/specialized_checkers/time"><class name="com/luchersol/specialized_checkers/time/CheckerDuration" sourcefilename="CheckerDuration.java"><method name="&lt;init&gt;" desc="(Ljava/time/Duration;Ljava/lang/String;)V" line="44"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/time/Duration;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/time/CheckerDuration;" line="55"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="(Ljava/time/Duration;)Lcom/luchersol/specialized_checkers/time/CheckerDuration;" line="65"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/time/CheckerDuration;" line="75"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isPositive" desc="()Lcom/luchersol/specialized_checkers/time/CheckerDuration;" line="84"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isNegative" desc="()Lcom/luchersol/specialized_checkers/time/CheckerDuration;" line="93"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isZero" desc="()Lcom/luchersol/specialized_checkers/time/CheckerDuration;" line="102"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isGreaterThan" desc="(Ljava/time/temporal/TemporalUnit;D)Lcom/luchersol/specialized_checkers/time/CheckerDuration;" line="113"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isGreaterOrEqualThan" desc="(Ljava/time/temporal/TemporalUnit;D)Lcom/luchersol/specialized_checkers/time/CheckerDuration;" line="124"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isLessThan" desc="(Ljava/time/temporal/TemporalUnit;D)Lcom/luchersol/specialized_checkers/time/CheckerDuration;" line="135"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isLessOrEqualThan" desc="(Ljava/time/temporal/TemporalUnit;D)Lcom/luchersol/specialized_checkers/time/CheckerDuration;" line="146"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEqual" desc="(Ljava/time/temporal/TemporalUnit;D)Lcom/luchersol/specialized_checkers/time/CheckerDuration;" line="157"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isGreaterThan" desc="(Ljava/time/Duration;)Lcom/luchersol/specialized_checkers/time/CheckerDuration;" line="167"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isGreaterOrEqualThan" desc="(Ljava/time/Duration;)Lcom/luchersol/specialized_checkers/time/CheckerDuration;" line="177"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isLessThan" desc="(Ljava/time/Duration;)Lcom/luchersol/specialized_checkers/time/CheckerDuration;" line="187"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isLessOrEqualThan" desc="(Ljava/time/Duration;)Lcom/luchersol/specialized_checkers/time/CheckerDuration;" line="197"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEqual" desc="(Ljava/time/Duration;)Lcom/luchersol/specialized_checkers/time/CheckerDuration;" line="207"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isEqual$12" desc="(Ljava/time/Duration;Ljava/time/Duration;)Z" line="207"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isLessOrEqualThan$11" desc="(Ljava/time/Duration;Ljava/time/Duration;)Z" line="197"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isLessThan$10" desc="(Ljava/time/Duration;Ljava/time/Duration;)Z" line="187"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isGreaterOrEqualThan$9" desc="(Ljava/time/Duration;Ljava/time/Duration;)Z" line="177"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isGreaterThan$8" desc="(Ljava/time/Duration;Ljava/time/Duration;)Z" line="167"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isEqual$7" desc="(Ljava/time/temporal/TemporalUnit;DLjava/time/Duration;)Z" line="157"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isLessOrEqualThan$6" desc="(Ljava/time/temporal/TemporalUnit;DLjava/time/Duration;)Z" line="146"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isLessThan$5" desc="(Ljava/time/temporal/TemporalUnit;DLjava/time/Duration;)Z" line="135"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isGreaterOrEqualThan$4" desc="(Ljava/time/temporal/TemporalUnit;DLjava/time/Duration;)Z" line="124"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isGreaterThan$3" desc="(Ljava/time/temporal/TemporalUnit;DLjava/time/Duration;)Z" line="113"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isZero$2" desc="(Ljava/time/Duration;)Z" line="102"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isNegative$1" desc="(Ljava/time/Duration;)Z" line="93"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isPositive$0" desc="(Ljava/time/Duration;)Z" line="84"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="10" covered="237"/><counter type="BRANCH" missed="0" covered="24"/><counter type="LINE" missed="2" covered="16"/><counter type="COMPLEXITY" missed="2" covered="40"/><counter type="METHOD" missed="2" covered="28"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/luchersol/specialized_checkers/time/CheckerPeriod" sourcefilename="CheckerPeriod.java"><method name="&lt;init&gt;" desc="(Ljava/time/Period;Ljava/lang/String;)V" line="44"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/time/Period;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/time/CheckerPeriod;" line="55"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="(Ljava/time/Period;)Lcom/luchersol/specialized_checkers/time/CheckerPeriod;" line="65"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/time/CheckerPeriod;" line="75"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isPositive" desc="()Lcom/luchersol/specialized_checkers/time/CheckerPeriod;" line="84"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isNegative" desc="()Lcom/luchersol/specialized_checkers/time/CheckerPeriod;" line="93"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isZero" desc="()Lcom/luchersol/specialized_checkers/time/CheckerPeriod;" line="102"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isGreaterThan" desc="(Ljava/time/temporal/TemporalUnit;D)Lcom/luchersol/specialized_checkers/time/CheckerPeriod;" line="113"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isGreaterOrEqualThan" desc="(Ljava/time/temporal/TemporalUnit;D)Lcom/luchersol/specialized_checkers/time/CheckerPeriod;" line="124"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isLessThan" desc="(Ljava/time/temporal/TemporalUnit;D)Lcom/luchersol/specialized_checkers/time/CheckerPeriod;" line="135"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isLessOrEqualThan" desc="(Ljava/time/temporal/TemporalUnit;D)Lcom/luchersol/specialized_checkers/time/CheckerPeriod;" line="146"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEqual" desc="(Ljava/time/temporal/TemporalUnit;D)Lcom/luchersol/specialized_checkers/time/CheckerPeriod;" line="157"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="comparateTo" desc="(Ljava/time/Period;Ljava/time/Period;)I" line="168"><counter type="INSTRUCTION" missed="4" covered="25"/><counter type="BRANCH" missed="2" covered="6"/><counter type="LINE" missed="2" covered="7"/><counter type="COMPLEXITY" missed="2" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isGreaterThan" desc="(Ljava/time/Period;)Lcom/luchersol/specialized_checkers/time/CheckerPeriod;" line="187"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isGreaterOrEqualThan" desc="(Ljava/time/Period;)Lcom/luchersol/specialized_checkers/time/CheckerPeriod;" line="197"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isLessThan" desc="(Ljava/time/Period;)Lcom/luchersol/specialized_checkers/time/CheckerPeriod;" line="207"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isLessOrEqualThan" desc="(Ljava/time/Period;)Lcom/luchersol/specialized_checkers/time/CheckerPeriod;" line="217"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEqual" desc="(Ljava/time/Period;)Lcom/luchersol/specialized_checkers/time/CheckerPeriod;" line="227"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isEqual$12" desc="(Ljava/time/Period;Ljava/time/Period;)Z" line="227"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isLessOrEqualThan$11" desc="(Ljava/time/Period;Ljava/time/Period;)Z" line="217"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isLessThan$10" desc="(Ljava/time/Period;Ljava/time/Period;)Z" line="207"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isGreaterOrEqualThan$9" desc="(Ljava/time/Period;Ljava/time/Period;)Z" line="197"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isGreaterThan$8" desc="(Ljava/time/Period;Ljava/time/Period;)Z" line="187"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isEqual$7" desc="(Ljava/time/temporal/TemporalUnit;DLjava/time/Period;)Z" line="157"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isLessOrEqualThan$6" desc="(Ljava/time/temporal/TemporalUnit;DLjava/time/Period;)Z" line="146"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isLessThan$5" desc="(Ljava/time/temporal/TemporalUnit;DLjava/time/Period;)Z" line="135"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isGreaterOrEqualThan$4" desc="(Ljava/time/temporal/TemporalUnit;DLjava/time/Period;)Z" line="124"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isGreaterThan$3" desc="(Ljava/time/temporal/TemporalUnit;DLjava/time/Period;)Z" line="113"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isZero$2" desc="(Ljava/time/Period;)Z" line="102"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isNegative$1" desc="(Ljava/time/Period;)Z" line="93"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isPositive$0" desc="(Ljava/time/Period;)Z" line="84"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="14" covered="262"/><counter type="BRANCH" missed="2" covered="30"/><counter type="LINE" missed="4" covered="23"/><counter type="COMPLEXITY" missed="4" covered="43"/><counter type="METHOD" missed="2" covered="29"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="CheckerPeriod.java"><line nr="44" mi="0" ci="4" mb="0" cb="0"/><line nr="45" mi="0" ci="1" mb="0" cb="0"/><line nr="55" mi="6" ci="0" mb="0" cb="0"/><line nr="65" mi="4" ci="0" mb="0" cb="0"/><line nr="75" mi="0" ci="2" mb="0" cb="0"/><line nr="84" mi="0" ci="18" mb="0" cb="4"/><line nr="93" mi="0" ci="11" mb="0" cb="0"/><line nr="102" mi="0" ci="11" mb="0" cb="0"/><line nr="113" mi="0" ci="21" mb="0" cb="2"/><line nr="124" mi="0" ci="21" mb="0" cb="2"/><line nr="135" mi="0" ci="21" mb="0" cb="2"/><line nr="146" mi="0" ci="21" mb="0" cb="2"/><line nr="157" mi="0" ci="21" mb="0" cb="2"/><line nr="168" mi="0" ci="4" mb="0" cb="2"/><line nr="169" mi="0" ci="2" mb="0" cb="0"/><line nr="170" mi="0" ci="5" mb="0" cb="2"/><line nr="171" mi="0" ci="2" mb="0" cb="0"/><line nr="172" mi="0" ci="5" mb="1" cb="1"/><line nr="173" mi="2" ci="0" mb="0" cb="0"/><line nr="174" mi="0" ci="5" mb="1" cb="1"/><line nr="175" mi="2" ci="0" mb="0" cb="0"/><line nr="177" mi="0" ci="2" mb="0" cb="0"/><line nr="187" mi="0" ci="17" mb="0" cb="2"/><line nr="197" mi="0" ci="17" mb="0" cb="2"/><line nr="207" mi="0" ci="17" mb="0" cb="2"/><line nr="217" mi="0" ci="17" mb="0" cb="2"/><line nr="227" mi="0" ci="17" mb="0" cb="2"/><counter type="INSTRUCTION" missed="14" covered="262"/><counter type="BRANCH" missed="2" covered="30"/><counter type="LINE" missed="4" covered="23"/><counter type="COMPLEXITY" missed="4" covered="43"/><counter type="METHOD" missed="2" covered="29"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="CheckerDuration.java"><line nr="44" mi="0" ci="4" mb="0" cb="0"/><line nr="45" mi="0" ci="1" mb="0" cb="0"/><line nr="55" mi="6" ci="0" mb="0" cb="0"/><line nr="65" mi="4" ci="0" mb="0" cb="0"/><line nr="75" mi="0" ci="2" mb="0" cb="0"/><line nr="84" mi="0" ci="18" mb="0" cb="4"/><line nr="93" mi="0" ci="11" mb="0" cb="0"/><line nr="102" mi="0" ci="11" mb="0" cb="0"/><line nr="113" mi="0" ci="21" mb="0" cb="2"/><line nr="124" mi="0" ci="21" mb="0" cb="2"/><line nr="135" mi="0" ci="21" mb="0" cb="2"/><line nr="146" mi="0" ci="21" mb="0" cb="2"/><line nr="157" mi="0" ci="21" mb="0" cb="2"/><line nr="167" mi="0" ci="17" mb="0" cb="2"/><line nr="177" mi="0" ci="17" mb="0" cb="2"/><line nr="187" mi="0" ci="17" mb="0" cb="2"/><line nr="197" mi="0" ci="17" mb="0" cb="2"/><line nr="207" mi="0" ci="17" mb="0" cb="2"/><counter type="INSTRUCTION" missed="10" covered="237"/><counter type="BRANCH" missed="0" covered="24"/><counter type="LINE" missed="2" covered="16"/><counter type="COMPLEXITY" missed="2" covered="40"/><counter type="METHOD" missed="2" covered="28"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="24" covered="499"/><counter type="BRANCH" missed="2" covered="54"/><counter type="LINE" missed="6" covered="39"/><counter type="COMPLEXITY" missed="6" covered="83"/><counter type="METHOD" missed="4" covered="57"/><counter type="CLASS" missed="0" covered="2"/></package><package name="com/luchersol/specialized_checkers/math"><class name="com/luchersol/specialized_checkers/math/CheckerArray" sourcefilename="CheckerArray.java"><method name="&lt;init&gt;" desc="([Ljava/lang/Object;Ljava/lang/String;)V" line="47"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="([Ljava/lang/Object;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/math/CheckerArray;" line="59"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="([Ljava/lang/Object;)Lcom/luchersol/specialized_checkers/math/CheckerArray;" line="70"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/math/CheckerArray;" line="80"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="getTypeName" desc="()Ljava/lang/String;" line="89"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Lcom/luchersol/specialized_checkers/math/CheckerArray;" line="98"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isSortedAsc" desc="(Ljava/util/Comparator;)Lcom/luchersol/specialized_checkers/math/CheckerArray;" line="108"><counter type="INSTRUCTION" missed="2" covered="50"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="1" covered="8"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isSortedAsc" desc="()Lcom/luchersol/specialized_checkers/math/CheckerArray;" line="128"><counter type="INSTRUCTION" missed="0" covered="51"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="9"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isSortedDesc" desc="(Ljava/util/Comparator;)Lcom/luchersol/specialized_checkers/math/CheckerArray;" line="149"><counter type="INSTRUCTION" missed="2" covered="51"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="1" covered="8"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isSortedDesc" desc="()Lcom/luchersol/specialized_checkers/math/CheckerArray;" line="169"><counter type="INSTRUCTION" missed="0" covered="54"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="10"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isSufficientPercentage" desc="(Ljava/util/function/Predicate;D)Lcom/luchersol/specialized_checkers/math/CheckerArray;" line="193"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="anyMatch" desc="(Ljava/util/function/Predicate;)Lcom/luchersol/specialized_checkers/math/CheckerArray;" line="207"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="allMatch" desc="(Ljava/util/function/Predicate;)Lcom/luchersol/specialized_checkers/math/CheckerArray;" line="217"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$allMatch$11" desc="(Ljava/util/function/Predicate;[Ljava/lang/Object;)Z" line="217"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$anyMatch$10" desc="(Ljava/util/function/Predicate;[Ljava/lang/Object;)Z" line="207"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isSufficientPercentage$9" desc="(Ljava/util/function/Predicate;D[Ljava/lang/Object;)Z" line="194"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isSortedDesc$8" desc="([Ljava/lang/Object;[Ljava/lang/Object;)Z" line="179"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isSortedDesc$7" desc="([Ljava/lang/Object;)Z" line="172"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isSortedDesc$6" desc="([Ljava/lang/Object;[Ljava/lang/Object;)Z" line="157"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isSortedDesc$5" desc="([Ljava/lang/Object;)Z" line="152"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isSortedAsc$4" desc="([Ljava/lang/Object;[Ljava/lang/Object;)Z" line="136"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isSortedAsc$3" desc="([Ljava/lang/Object;)Z" line="131"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isSortedAsc$2" desc="([Ljava/lang/Object;[Ljava/lang/Object;)Z" line="116"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isSortedAsc$1" desc="([Ljava/lang/Object;)Z" line="111"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isEmpty$0" desc="([Ljava/lang/Object;)Z" line="98"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="14" covered="332"/><counter type="BRANCH" missed="6" covered="14"/><counter type="LINE" missed="4" covered="46"/><counter type="COMPLEXITY" missed="8" covered="27"/><counter type="METHOD" missed="2" covered="23"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/luchersol/specialized_checkers/math/CheckerMatrix" sourcefilename="CheckerMatrix.java"><method name="&lt;init&gt;" desc="([[Ljava/lang/Number;Ljava/lang/String;)V" line="62"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="([[Ljava/lang/Number;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/math/CheckerMatrix;" line="75"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="([[Ljava/lang/Number;)Lcom/luchersol/specialized_checkers/math/CheckerMatrix;" line="86"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/math/CheckerMatrix;" line="96"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Lcom/luchersol/specialized_checkers/math/CheckerMatrix;" line="105"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isSquare" desc="()Lcom/luchersol/specialized_checkers/math/CheckerMatrix;" line="117"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isZero" desc="()Lcom/luchersol/specialized_checkers/math/CheckerMatrix;" line="136"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isIdentity" desc="()Lcom/luchersol/specialized_checkers/math/CheckerMatrix;" line="148"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isSymmetric" desc="()Lcom/luchersol/specialized_checkers/math/CheckerMatrix;" line="170"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isDiagonal" desc="()Lcom/luchersol/specialized_checkers/math/CheckerMatrix;" line="191"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isOrthogonal" desc="()Lcom/luchersol/specialized_checkers/math/CheckerMatrix;" line="212"><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isInvertible" desc="()Lcom/luchersol/specialized_checkers/math/CheckerMatrix;" line="232"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isPositiveDefinite" desc="()Lcom/luchersol/specialized_checkers/math/CheckerMatrix;" line="251"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isUpperTriangular" desc="()Lcom/luchersol/specialized_checkers/math/CheckerMatrix;" line="270"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isLowerTriangular" desc="()Lcom/luchersol/specialized_checkers/math/CheckerMatrix;" line="291"><counter type="INSTRUCTION" missed="0" covered="13"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasRank" desc="(I)Lcom/luchersol/specialized_checkers/math/CheckerMatrix;" line="313"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasRealEigenvalues" desc="()Lcom/luchersol/specialized_checkers/math/CheckerMatrix;" line="328"><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isFullRank" desc="()Lcom/luchersol/specialized_checkers/math/CheckerMatrix;" line="348"><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="anyMatch" desc="(Ljava/util/function/Predicate;)Lcom/luchersol/specialized_checkers/math/CheckerMatrix;" line="365"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="allMatch" desc="(Ljava/util/function/Predicate;)Lcom/luchersol/specialized_checkers/math/CheckerMatrix;" line="377"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="convertToDoubleMatrix" desc="([[Ljava/lang/Number;)[[D" line="390"><counter type="INSTRUCTION" missed="0" covered="39"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="7"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$allMatch$19" desc="(Ljava/util/function/Predicate;[[Ljava/lang/Number;)Z" line="377"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$allMatch$18" desc="(Ljava/util/function/Predicate;Ljava/lang/Number;)Z" line="377"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$anyMatch$17" desc="(Ljava/util/function/Predicate;[[Ljava/lang/Number;)Z" line="365"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$anyMatch$16" desc="(Ljava/util/function/Predicate;Ljava/lang/Number;)Z" line="365"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isFullRank$15" desc="([[Ljava/lang/Number;)Z" line="350"><counter type="INSTRUCTION" missed="27" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$hasRealEigenvalues$14" desc="([[Ljava/lang/Number;)Z" line="330"><counter type="INSTRUCTION" missed="35" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="6" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$hasRank$13" desc="(I[[Ljava/lang/Number;)Z" line="315"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isLowerTriangular$12" desc="([[Ljava/lang/Number;)Z" line="293"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isUpperTriangular$11" desc="([[Ljava/lang/Number;)Z" line="272"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isPositiveDefinite$10" desc="([[Ljava/lang/Number;)Z" line="253"><counter type="INSTRUCTION" missed="0" covered="36"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isInvertible$9" desc="([[Ljava/lang/Number;)Z" line="234"><counter type="INSTRUCTION" missed="3" covered="15"/><counter type="LINE" missed="2" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isOrthogonal$8" desc="([[Ljava/lang/Number;)Z" line="214"><counter type="INSTRUCTION" missed="38" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="7" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isDiagonal$7" desc="([[Ljava/lang/Number;)Z" line="193"><counter type="INSTRUCTION" missed="0" covered="33"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="5"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isSymmetric$6" desc="([[Ljava/lang/Number;)Z" line="172"><counter type="INSTRUCTION" missed="0" covered="32"/><counter type="BRANCH" missed="0" covered="6"/><counter type="LINE" missed="0" covered="6"/><counter type="COMPLEXITY" missed="0" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isIdentity$5" desc="([[Ljava/lang/Number;)Z" line="150"><counter type="INSTRUCTION" missed="2" covered="45"/><counter type="BRANCH" missed="1" covered="11"/><counter type="LINE" missed="1" covered="7"/><counter type="COMPLEXITY" missed="1" covered="6"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isZero$4" desc="([[Ljava/lang/Number;)Z" line="136"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isZero$3" desc="(Ljava/lang/Number;)Z" line="137"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isSquare$2" desc="([[Ljava/lang/Number;)Z" line="118"><counter type="INSTRUCTION" missed="2" covered="28"/><counter type="BRANCH" missed="1" covered="5"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="1" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isEmpty$1" desc="([[Ljava/lang/Number;)Z" line="106"><counter type="INSTRUCTION" missed="5" covered="7"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="1" covered="1"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isEmpty$0" desc="([Ljava/lang/Number;)Z" line="107"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="170" covered="528"/><counter type="BRANCH" missed="17" covered="57"/><counter type="LINE" missed="33" covered="97"/><counter type="COMPLEXITY" missed="20" covered="58"/><counter type="METHOD" missed="9" covered="32"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/luchersol/specialized_checkers/math/CheckerPolygon" sourcefilename="CheckerPolygon.java"><method name="&lt;init&gt;" desc="(Ljava/awt/Polygon;Ljava/lang/String;)V" line="41"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="(Ljava/awt/Polygon;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/math/CheckerPolygon;" line="53"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="([I[IILjava/lang/String;)Lcom/luchersol/specialized_checkers/math/CheckerPolygon;" line="67"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="(Ljava/awt/Polygon;)Lcom/luchersol/specialized_checkers/math/CheckerPolygon;" line="78"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="([I[II)Lcom/luchersol/specialized_checkers/math/CheckerPolygon;" line="90"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/math/CheckerPolygon;" line="102"><counter type="INSTRUCTION" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="38" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="6" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><sourcefile name="CheckerArray.java"><line nr="47" mi="0" ci="4" mb="0" cb="0"/><line nr="48" mi="0" ci="1" mb="0" cb="0"/><line nr="59" mi="6" ci="0" mb="0" cb="0"/><line nr="70" mi="4" ci="0" mb="0" cb="0"/><line nr="80" mi="0" ci="2" mb="0" cb="0"/><line nr="89" mi="0" ci="7" mb="0" cb="0"/><line nr="98" mi="0" ci="15" mb="0" cb="2"/><line nr="108" mi="0" ci="5" mb="1" cb="1"/><line nr="109" mi="2" ci="0" mb="0" cb="0"/><line nr="110" mi="0" ci="7" mb="0" cb="0"/><line nr="111" mi="0" ci="19" mb="0" cb="0"/><line nr="113" mi="0" ci="2" mb="1" cb="1"/><line nr="114" mi="0" ci="9" mb="0" cb="0"/><line nr="115" mi="0" ci="3" mb="0" cb="0"/><line nr="116" mi="0" ci="12" mb="0" cb="0"/><line nr="119" mi="0" ci="2" mb="0" cb="0"/><line nr="128" mi="0" ci="5" mb="0" cb="2"/><line nr="129" mi="0" ci="2" mb="0" cb="0"/><line nr="130" mi="0" ci="7" mb="0" cb="0"/><line nr="131" mi="0" ci="19" mb="0" cb="0"/><line nr="133" mi="0" ci="2" mb="1" cb="1"/><line nr="134" mi="0" ci="9" mb="0" cb="0"/><line nr="135" mi="0" ci="2" mb="0" cb="0"/><line nr="136" mi="0" ci="12" mb="0" cb="0"/><line nr="139" mi="0" ci="2" mb="0" cb="0"/><line nr="149" mi="0" ci="5" mb="1" cb="1"/><line nr="150" mi="2" ci="0" mb="0" cb="0"/><line nr="151" mi="0" ci="7" mb="0" cb="0"/><line nr="152" mi="0" ci="19" mb="0" cb="0"/><line nr="154" mi="0" ci="2" mb="1" cb="1"/><line nr="155" mi="0" ci="9" mb="0" cb="0"/><line nr="156" mi="0" ci="4" mb="0" cb="0"/><line nr="157" mi="0" ci="12" mb="0" cb="0"/><line nr="160" mi="0" ci="2" mb="0" cb="0"/><line nr="169" mi="0" ci="5" mb="0" cb="2"/><line nr="170" mi="0" ci="2" mb="0" cb="0"/><line nr="171" mi="0" ci="7" mb="0" cb="0"/><line nr="172" mi="0" ci="19" mb="0" cb="0"/><line nr="174" mi="0" ci="2" mb="1" cb="1"/><line nr="175" mi="0" ci="9" mb="0" cb="0"/><line nr="177" mi="0" ci="2" mb="0" cb="0"/><line nr="178" mi="0" ci="3" mb="0" cb="0"/><line nr="179" mi="0" ci="12" mb="0" cb="0"/><line nr="182" mi="0" ci="2" mb="0" cb="0"/><line nr="193" mi="0" ci="4" mb="0" cb="0"/><line nr="194" mi="0" ci="13" mb="0" cb="0"/><line nr="195" mi="0" ci="8" mb="0" cb="2"/><line nr="197" mi="0" ci="8" mb="0" cb="0"/><line nr="207" mi="0" ci="14" mb="0" cb="0"/><line nr="217" mi="0" ci="14" mb="0" cb="0"/><counter type="INSTRUCTION" missed="14" covered="332"/><counter type="BRANCH" missed="6" covered="14"/><counter type="LINE" missed="4" covered="46"/><counter type="COMPLEXITY" missed="8" covered="27"/><counter type="METHOD" missed="2" covered="23"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="CheckerPolygon.java"><line nr="41" mi="4" ci="0" mb="0" cb="0"/><line nr="42" mi="1" ci="0" mb="0" cb="0"/><line nr="53" mi="6" ci="0" mb="0" cb="0"/><line nr="67" mi="7" ci="0" mb="0" cb="0"/><line nr="68" mi="4" ci="0" mb="0" cb="0"/><line nr="78" mi="4" ci="0" mb="0" cb="0"/><line nr="90" mi="7" ci="0" mb="0" cb="0"/><line nr="91" mi="3" ci="0" mb="0" cb="0"/><line nr="102" mi="2" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="38" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="6" covered="0"/><counter type="METHOD" missed="6" covered="0"/><counter type="CLASS" missed="1" covered="0"/></sourcefile><sourcefile name="CheckerMatrix.java"><line nr="62" mi="0" ci="4" mb="0" cb="0"/><line nr="63" mi="0" ci="1" mb="0" cb="0"/><line nr="75" mi="6" ci="0" mb="0" cb="0"/><line nr="86" mi="4" ci="0" mb="0" cb="0"/><line nr="96" mi="0" ci="2" mb="0" cb="0"/><line nr="105" mi="0" ci="7" mb="0" cb="0"/><line nr="106" mi="0" ci="7" mb="2" cb="2"/><line nr="107" mi="14" ci="0" mb="4" cb="0"/><line nr="108" mi="0" ci="1" mb="0" cb="0"/><line nr="117" mi="0" ci="2" mb="0" cb="0"/><line nr="118" mi="0" ci="3" mb="1" cb="1"/><line nr="119" mi="2" ci="0" mb="0" cb="0"/><line nr="120" mi="0" ci="16" mb="0" cb="2"/><line nr="121" mi="0" ci="5" mb="0" cb="2"/><line nr="122" mi="0" ci="2" mb="0" cb="0"/><line nr="125" mi="0" ci="2" mb="0" cb="0"/><line nr="127" mi="0" ci="8" mb="0" cb="0"/><line nr="136" mi="0" ci="11" mb="1" cb="1"/><line nr="137" mi="0" ci="18" mb="0" cb="4"/><line nr="138" mi="0" ci="1" mb="0" cb="0"/><line nr="139" mi="0" ci="2" mb="0" cb="0"/><line nr="148" mi="0" ci="3" mb="0" cb="0"/><line nr="149" mi="0" ci="2" mb="0" cb="0"/><line nr="150" mi="0" ci="3" mb="0" cb="0"/><line nr="151" mi="0" ci="7" mb="0" cb="2"/><line nr="152" mi="0" ci="7" mb="0" cb="2"/><line nr="153" mi="0" ci="12" mb="1" cb="3"/><line nr="154" mi="2" ci="0" mb="0" cb="0"/><line nr="155" mi="0" ci="12" mb="0" cb="4"/><line nr="156" mi="0" ci="2" mb="0" cb="0"/><line nr="159" mi="0" ci="2" mb="0" cb="0"/><line nr="161" mi="0" ci="8" mb="0" cb="0"/><line nr="170" mi="0" ci="3" mb="0" cb="0"/><line nr="171" mi="0" ci="2" mb="0" cb="0"/><line nr="172" mi="0" ci="3" mb="0" cb="0"/><line nr="173" mi="0" ci="7" mb="0" cb="2"/><line nr="174" mi="0" ci="7" mb="0" cb="2"/><line nr="175" mi="0" ci="11" mb="0" cb="2"/><line nr="176" mi="0" ci="2" mb="0" cb="0"/><line nr="180" mi="0" ci="2" mb="0" cb="0"/><line nr="182" mi="0" ci="8" mb="0" cb="0"/><line nr="191" mi="0" ci="3" mb="0" cb="0"/><line nr="192" mi="0" ci="2" mb="0" cb="0"/><line nr="193" mi="0" ci="3" mb="0" cb="0"/><line nr="194" mi="0" ci="7" mb="0" cb="2"/><line nr="195" mi="0" ci="7" mb="0" cb="2"/><line nr="196" mi="0" ci="12" mb="0" cb="4"/><line nr="197" mi="0" ci="2" mb="0" cb="0"/><line nr="201" mi="0" ci="2" mb="0" cb="0"/><line nr="203" mi="0" ci="8" mb="0" cb="0"/><line nr="212" mi="3" ci="0" mb="0" cb="0"/><line nr="213" mi="2" ci="0" mb="0" cb="0"/><line nr="214" mi="6" ci="0" mb="0" cb="0"/><line nr="215" mi="3" ci="0" mb="0" cb="0"/><line nr="216" mi="4" ci="0" mb="0" cb="0"/><line nr="217" mi="8" ci="0" mb="0" cb="0"/><line nr="218" mi="8" ci="0" mb="2" cb="0"/><line nr="219" mi="5" ci="0" mb="0" cb="0"/><line nr="221" mi="4" ci="0" mb="0" cb="0"/><line nr="223" mi="8" ci="0" mb="0" cb="0"/><line nr="232" mi="0" ci="3" mb="0" cb="0"/><line nr="233" mi="0" ci="2" mb="0" cb="0"/><line nr="234" mi="0" ci="6" mb="0" cb="0"/><line nr="236" mi="0" ci="5" mb="0" cb="0"/><line nr="237" mi="0" ci="4" mb="0" cb="0"/><line nr="238" mi="1" ci="0" mb="0" cb="0"/><line nr="239" mi="2" ci="0" mb="0" cb="0"/><line nr="242" mi="0" ci="8" mb="0" cb="0"/><line nr="251" mi="0" ci="3" mb="0" cb="0"/><line nr="252" mi="0" ci="2" mb="0" cb="0"/><line nr="253" mi="0" ci="6" mb="0" cb="0"/><line nr="254" mi="0" ci="5" mb="0" cb="0"/><line nr="255" mi="0" ci="17" mb="0" cb="2"/><line nr="256" mi="0" ci="4" mb="0" cb="2"/><line nr="257" mi="0" ci="2" mb="0" cb="0"/><line nr="259" mi="0" ci="2" mb="0" cb="0"/><line nr="261" mi="0" ci="8" mb="0" cb="0"/><line nr="270" mi="0" ci="3" mb="0" cb="0"/><line nr="271" mi="0" ci="2" mb="0" cb="0"/><line nr="272" mi="0" ci="3" mb="0" cb="0"/><line nr="273" mi="0" ci="7" mb="0" cb="2"/><line nr="274" mi="0" ci="7" mb="0" cb="2"/><line nr="275" mi="0" ci="9" mb="0" cb="2"/><line nr="276" mi="0" ci="2" mb="0" cb="0"/><line nr="280" mi="0" ci="2" mb="0" cb="0"/><line nr="282" mi="0" ci="8" mb="0" cb="0"/><line nr="291" mi="0" ci="3" mb="0" cb="0"/><line nr="292" mi="0" ci="2" mb="0" cb="0"/><line nr="293" mi="0" ci="3" mb="0" cb="0"/><line nr="294" mi="0" ci="7" mb="0" cb="2"/><line nr="295" mi="0" ci="9" mb="0" cb="2"/><line nr="296" mi="0" ci="9" mb="0" cb="2"/><line nr="297" mi="0" ci="2" mb="0" cb="0"/><line nr="301" mi="0" ci="2" mb="0" cb="0"/><line nr="303" mi="0" ci="8" mb="0" cb="0"/><line nr="313" mi="0" ci="3" mb="0" cb="0"/><line nr="314" mi="0" ci="3" mb="0" cb="0"/><line nr="315" mi="0" ci="6" mb="0" cb="0"/><line nr="316" mi="0" ci="5" mb="0" cb="0"/><line nr="317" mi="0" ci="7" mb="0" cb="0"/><line nr="319" mi="0" ci="15" mb="0" cb="0"/><line nr="328" mi="3" ci="0" mb="0" cb="0"/><line nr="329" mi="2" ci="0" mb="0" cb="0"/><line nr="330" mi="6" ci="0" mb="0" cb="0"/><line nr="331" mi="5" ci="0" mb="0" cb="0"/><line nr="332" mi="17" ci="0" mb="2" cb="0"/><line nr="333" mi="3" ci="0" mb="2" cb="0"/><line nr="334" mi="2" ci="0" mb="0" cb="0"/><line nr="337" mi="2" ci="0" mb="0" cb="0"/><line nr="339" mi="8" ci="0" mb="0" cb="0"/><line nr="348" mi="3" ci="0" mb="0" cb="0"/><line nr="349" mi="2" ci="0" mb="0" cb="0"/><line nr="350" mi="6" ci="0" mb="0" cb="0"/><line nr="351" mi="5" ci="0" mb="0" cb="0"/><line nr="352" mi="3" ci="0" mb="0" cb="0"/><line nr="353" mi="13" ci="0" mb="2" cb="0"/><line nr="355" mi="8" ci="0" mb="0" cb="0"/><line nr="365" mi="0" ci="19" mb="0" cb="0"/><line nr="366" mi="0" ci="1" mb="0" cb="0"/><line nr="367" mi="0" ci="2" mb="0" cb="0"/><line nr="377" mi="0" ci="19" mb="0" cb="0"/><line nr="378" mi="0" ci="1" mb="0" cb="0"/><line nr="379" mi="0" ci="2" mb="0" cb="0"/><line nr="390" mi="0" ci="3" mb="0" cb="0"/><line nr="391" mi="0" ci="5" mb="0" cb="0"/><line nr="392" mi="0" ci="4" mb="0" cb="0"/><line nr="394" mi="0" ci="7" mb="0" cb="2"/><line nr="395" mi="0" ci="7" mb="0" cb="2"/><line nr="396" mi="0" ci="11" mb="0" cb="0"/><line nr="400" mi="0" ci="2" mb="0" cb="0"/><counter type="INSTRUCTION" missed="170" covered="528"/><counter type="BRANCH" missed="17" covered="57"/><counter type="LINE" missed="33" covered="97"/><counter type="COMPLEXITY" missed="20" covered="58"/><counter type="METHOD" missed="9" covered="32"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="222" covered="860"/><counter type="BRANCH" missed="23" covered="71"/><counter type="LINE" missed="46" covered="143"/><counter type="COMPLEXITY" missed="34" covered="85"/><counter type="METHOD" missed="17" covered="55"/><counter type="CLASS" missed="1" covered="2"/></package><package name="com/luchersol/specialized_checkers/math/numbers/integerTypes"><class name="com/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger" sourcefilename="CheckerInteger.java"><method name="&lt;init&gt;" desc="(Ljava/lang/Integer;Ljava/lang/String;)V" line="41"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/lang/Integer;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="52"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="(Ljava/lang/Number;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="63"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="(Ljava/lang/Integer;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="73"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="(Ljava/lang/Number;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="83"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="93"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEven" desc="()Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="102"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isOdd" desc="()Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="111"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isPrime" desc="()Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="120"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isPositive" desc="()Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="140"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isPositiveOrZero" desc="()Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="150"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isNegative" desc="()Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="160"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isNegativeOrZero" desc="()Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="170"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isZero" desc="()Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="180"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isGreaterThan" desc="(Ljava/lang/Byte;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="191"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterThan" desc="(Ljava/lang/Short;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="202"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterThan" desc="(Ljava/lang/Integer;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="213"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isGreaterThan" desc="(Ljava/lang/Long;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="224"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterThan" desc="(Ljava/lang/Float;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="236"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterThan" desc="(Ljava/lang/Double;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="248"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Byte;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="259"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Short;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="270"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Integer;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="281"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Long;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="292"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Float;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="304"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Double;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="316"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessThan" desc="(Ljava/lang/Byte;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="327"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessThan" desc="(Ljava/lang/Short;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="338"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessThan" desc="(Ljava/lang/Integer;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="349"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isLessThan" desc="(Ljava/lang/Long;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="360"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessThan" desc="(Ljava/lang/Float;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="371"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessThan" desc="(Ljava/lang/Double;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="382"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Byte;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="393"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Short;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="404"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Integer;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="415"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Long;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="426"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Float;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="438"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Double;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerInteger;" line="450"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessOrEqualTo$31" desc="(Ljava/lang/Double;Ljava/lang/Integer;)Z" line="450"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessOrEqualTo$30" desc="(Ljava/lang/Float;Ljava/lang/Integer;)Z" line="438"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessOrEqualTo$29" desc="(Ljava/lang/Long;Ljava/lang/Integer;)Z" line="426"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessOrEqualTo$28" desc="(Ljava/lang/Integer;Ljava/lang/Integer;)Z" line="415"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isLessOrEqualTo$27" desc="(Ljava/lang/Short;Ljava/lang/Integer;)Z" line="404"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessOrEqualTo$26" desc="(Ljava/lang/Byte;Ljava/lang/Integer;)Z" line="393"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessThan$25" desc="(Ljava/lang/Double;Ljava/lang/Integer;)Z" line="382"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessThan$24" desc="(Ljava/lang/Float;Ljava/lang/Integer;)Z" line="371"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessThan$23" desc="(Ljava/lang/Long;Ljava/lang/Integer;)Z" line="360"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessThan$22" desc="(Ljava/lang/Integer;Ljava/lang/Integer;)Z" line="349"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isLessThan$21" desc="(Ljava/lang/Short;Ljava/lang/Integer;)Z" line="338"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessThan$20" desc="(Ljava/lang/Byte;Ljava/lang/Integer;)Z" line="327"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterOrEqualTo$19" desc="(Ljava/lang/Double;Ljava/lang/Integer;)Z" line="316"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterOrEqualTo$18" desc="(Ljava/lang/Float;Ljava/lang/Integer;)Z" line="304"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterOrEqualTo$17" desc="(Ljava/lang/Long;Ljava/lang/Integer;)Z" line="292"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterOrEqualTo$16" desc="(Ljava/lang/Integer;Ljava/lang/Integer;)Z" line="281"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isGreaterOrEqualTo$15" desc="(Ljava/lang/Short;Ljava/lang/Integer;)Z" line="270"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterOrEqualTo$14" desc="(Ljava/lang/Byte;Ljava/lang/Integer;)Z" line="259"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterThan$13" desc="(Ljava/lang/Double;Ljava/lang/Integer;)Z" line="248"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterThan$12" desc="(Ljava/lang/Float;Ljava/lang/Integer;)Z" line="236"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterThan$11" desc="(Ljava/lang/Long;Ljava/lang/Integer;)Z" line="224"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterThan$10" desc="(Ljava/lang/Integer;Ljava/lang/Integer;)Z" line="213"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isGreaterThan$9" desc="(Ljava/lang/Short;Ljava/lang/Integer;)Z" line="202"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterThan$8" desc="(Ljava/lang/Byte;Ljava/lang/Integer;)Z" line="191"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isZero$7" desc="(Ljava/lang/Integer;)Z" line="180"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isNegativeOrZero$6" desc="(Ljava/lang/Integer;)Z" line="170"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isNegative$5" desc="(Ljava/lang/Integer;)Z" line="160"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isPositiveOrZero$4" desc="(Ljava/lang/Integer;)Z" line="150"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isPositive$3" desc="(Ljava/lang/Integer;)Z" line="140"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isPrime$2" desc="(Ljava/lang/Integer;)Z" line="121"><counter type="INSTRUCTION" missed="16" covered="34"/><counter type="BRANCH" missed="6" covered="8"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="4" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isOdd$1" desc="(Ljava/lang/Integer;)Z" line="111"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isEven$0" desc="(Ljava/lang/Integer;)Z" line="102"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="621" covered="319"/><counter type="BRANCH" missed="46" covered="30"/><counter type="LINE" missed="25" covered="21"/><counter type="COMPLEXITY" missed="68" covered="40"/><counter type="METHOD" missed="44" covered="26"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong" sourcefilename="CheckerLong.java"><method name="&lt;init&gt;" desc="(Ljava/lang/Long;Ljava/lang/String;)V" line="43"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/lang/Long;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="54"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/lang/Number;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="65"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/lang/Long;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="75"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="(Ljava/lang/Number;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="85"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="95"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEven" desc="()Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="104"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isOdd" desc="()Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="113"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isPrime" desc="()Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="122"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isPositive" desc="()Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="144"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isPositiveOrZero" desc="()Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="154"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isNegative" desc="()Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="164"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isNegativeOrZero" desc="()Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="174"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isZero" desc="()Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="184"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isGreaterThan" desc="(Ljava/lang/Byte;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="195"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterThan" desc="(Ljava/lang/Short;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="206"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterThan" desc="(Ljava/lang/Integer;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="217"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isGreaterThan" desc="(Ljava/lang/Long;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="228"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterThan" desc="(Ljava/lang/Float;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="240"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterThan" desc="(Ljava/lang/Double;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="252"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Byte;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="263"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Short;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="274"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Integer;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="285"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Long;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="296"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Float;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="307"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Double;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="318"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessThan" desc="(Ljava/lang/Byte;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="329"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessThan" desc="(Ljava/lang/Short;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="340"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessThan" desc="(Ljava/lang/Integer;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="351"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isLessThan" desc="(Ljava/lang/Long;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="362"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessThan" desc="(Ljava/lang/Float;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="373"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessThan" desc="(Ljava/lang/Double;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="384"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Byte;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="395"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Short;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="406"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Integer;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="417"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Long;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="428"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Float;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="439"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Double;)Lcom/luchersol/specialized_checkers/math/numbers/integerTypes/CheckerLong;" line="451"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessOrEqualTo$31" desc="(Ljava/lang/Double;Ljava/lang/Long;)Z" line="451"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessOrEqualTo$30" desc="(Ljava/lang/Float;Ljava/lang/Long;)Z" line="439"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessOrEqualTo$29" desc="(Ljava/lang/Long;Ljava/lang/Long;)Z" line="428"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessOrEqualTo$28" desc="(Ljava/lang/Integer;Ljava/lang/Long;)Z" line="417"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isLessOrEqualTo$27" desc="(Ljava/lang/Short;Ljava/lang/Long;)Z" line="406"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessOrEqualTo$26" desc="(Ljava/lang/Byte;Ljava/lang/Long;)Z" line="395"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessThan$25" desc="(Ljava/lang/Double;Ljava/lang/Long;)Z" line="384"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessThan$24" desc="(Ljava/lang/Float;Ljava/lang/Long;)Z" line="373"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessThan$23" desc="(Ljava/lang/Long;Ljava/lang/Long;)Z" line="362"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessThan$22" desc="(Ljava/lang/Integer;Ljava/lang/Long;)Z" line="351"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isLessThan$21" desc="(Ljava/lang/Short;Ljava/lang/Long;)Z" line="340"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessThan$20" desc="(Ljava/lang/Byte;Ljava/lang/Long;)Z" line="329"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterOrEqualTo$19" desc="(Ljava/lang/Double;Ljava/lang/Long;)Z" line="318"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterOrEqualTo$18" desc="(Ljava/lang/Float;Ljava/lang/Long;)Z" line="307"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterOrEqualTo$17" desc="(Ljava/lang/Long;Ljava/lang/Long;)Z" line="296"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterOrEqualTo$16" desc="(Ljava/lang/Integer;Ljava/lang/Long;)Z" line="285"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isGreaterOrEqualTo$15" desc="(Ljava/lang/Short;Ljava/lang/Long;)Z" line="274"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterOrEqualTo$14" desc="(Ljava/lang/Byte;Ljava/lang/Long;)Z" line="263"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterThan$13" desc="(Ljava/lang/Double;Ljava/lang/Long;)Z" line="252"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterThan$12" desc="(Ljava/lang/Float;Ljava/lang/Long;)Z" line="240"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterThan$11" desc="(Ljava/lang/Long;Ljava/lang/Long;)Z" line="228"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterThan$10" desc="(Ljava/lang/Integer;Ljava/lang/Long;)Z" line="217"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isGreaterThan$9" desc="(Ljava/lang/Short;Ljava/lang/Long;)Z" line="206"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterThan$8" desc="(Ljava/lang/Byte;Ljava/lang/Long;)Z" line="195"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isZero$7" desc="(Ljava/lang/Long;)Z" line="184"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isNegativeOrZero$6" desc="(Ljava/lang/Long;)Z" line="174"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isNegative$5" desc="(Ljava/lang/Long;)Z" line="164"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isPositiveOrZero$4" desc="(Ljava/lang/Long;)Z" line="154"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isPositive$3" desc="(Ljava/lang/Long;)Z" line="144"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isPrime$2" desc="(Ljava/lang/Long;)Z" line="123"><counter type="INSTRUCTION" missed="22" covered="42"/><counter type="BRANCH" missed="6" covered="8"/><counter type="LINE" missed="1" covered="5"/><counter type="COMPLEXITY" missed="4" covered="4"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isOdd$1" desc="(Ljava/lang/Long;)Z" line="113"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isEven$0" desc="(Ljava/lang/Long;)Z" line="104"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="627" covered="362"/><counter type="BRANCH" missed="46" covered="30"/><counter type="LINE" missed="23" covered="23"/><counter type="COMPLEXITY" missed="66" covered="42"/><counter type="METHOD" missed="42" covered="28"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="CheckerLong.java"><line nr="43" mi="0" ci="4" mb="0" cb="0"/><line nr="44" mi="0" ci="1" mb="0" cb="0"/><line nr="54" mi="0" ci="6" mb="0" cb="0"/><line nr="65" mi="0" ci="6" mb="0" cb="0"/><line nr="75" mi="4" ci="0" mb="0" cb="0"/><line nr="85" mi="5" ci="0" mb="0" cb="0"/><line nr="95" mi="0" ci="2" mb="0" cb="0"/><line nr="104" mi="0" ci="25" mb="0" cb="2"/><line nr="113" mi="0" ci="25" mb="0" cb="2"/><line nr="122" mi="0" ci="2" mb="0" cb="0"/><line nr="123" mi="0" ci="7" mb="0" cb="2"/><line nr="124" mi="0" ci="7" mb="0" cb="2"/><line nr="125" mi="0" ci="16" mb="1" cb="3"/><line nr="127" mi="2" ci="10" mb="1" cb="1"/><line nr="128" mi="20" ci="0" mb="4" cb="0"/><line nr="131" mi="0" ci="2" mb="0" cb="0"/><line nr="134" mi="0" ci="14" mb="0" cb="0"/><line nr="144" mi="0" ci="23" mb="0" cb="2"/><line nr="154" mi="0" ci="23" mb="0" cb="2"/><line nr="164" mi="0" ci="23" mb="0" cb="2"/><line nr="174" mi="0" ci="23" mb="0" cb="2"/><line nr="184" mi="0" ci="23" mb="0" cb="2"/><line nr="195" mi="30" ci="0" mb="2" cb="0"/><line nr="206" mi="30" ci="0" mb="2" cb="0"/><line nr="217" mi="0" ci="30" mb="0" cb="2"/><line nr="228" mi="29" ci="0" mb="2" cb="0"/><line nr="240" mi="30" ci="0" mb="2" cb="0"/><line nr="252" mi="30" ci="0" mb="2" cb="0"/><line nr="263" mi="30" ci="0" mb="2" cb="0"/><line nr="274" mi="30" ci="0" mb="2" cb="0"/><line nr="285" mi="0" ci="30" mb="0" cb="2"/><line nr="296" mi="29" ci="0" mb="2" cb="0"/><line nr="307" mi="30" ci="0" mb="2" cb="0"/><line nr="318" mi="30" ci="0" mb="2" cb="0"/><line nr="329" mi="30" ci="0" mb="2" cb="0"/><line nr="340" mi="30" ci="0" mb="2" cb="0"/><line nr="351" mi="0" ci="30" mb="0" cb="2"/><line nr="362" mi="29" ci="0" mb="2" cb="0"/><line nr="373" mi="30" ci="0" mb="2" cb="0"/><line nr="384" mi="30" ci="0" mb="2" cb="0"/><line nr="395" mi="30" ci="0" mb="2" cb="0"/><line nr="406" mi="30" ci="0" mb="2" cb="0"/><line nr="417" mi="0" ci="30" mb="0" cb="2"/><line nr="428" mi="29" ci="0" mb="2" cb="0"/><line nr="439" mi="30" ci="0" mb="2" cb="0"/><line nr="451" mi="30" ci="0" mb="2" cb="0"/><counter type="INSTRUCTION" missed="627" covered="362"/><counter type="BRANCH" missed="46" covered="30"/><counter type="LINE" missed="23" covered="23"/><counter type="COMPLEXITY" missed="66" covered="42"/><counter type="METHOD" missed="42" covered="28"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="CheckerInteger.java"><line nr="41" mi="0" ci="4" mb="0" cb="0"/><line nr="42" mi="0" ci="1" mb="0" cb="0"/><line nr="52" mi="6" ci="0" mb="0" cb="0"/><line nr="63" mi="6" ci="0" mb="0" cb="0"/><line nr="73" mi="4" ci="0" mb="0" cb="0"/><line nr="83" mi="5" ci="0" mb="0" cb="0"/><line nr="93" mi="0" ci="2" mb="0" cb="0"/><line nr="102" mi="0" ci="23" mb="0" cb="2"/><line nr="111" mi="0" ci="24" mb="0" cb="2"/><line nr="120" mi="0" ci="13" mb="0" cb="0"/><line nr="121" mi="0" ci="6" mb="0" cb="2"/><line nr="122" mi="0" ci="6" mb="0" cb="2"/><line nr="123" mi="0" ci="12" mb="1" cb="3"/><line nr="125" mi="2" ci="8" mb="1" cb="1"/><line nr="126" mi="14" ci="0" mb="4" cb="0"/><line nr="129" mi="0" ci="2" mb="0" cb="0"/><line nr="130" mi="0" ci="1" mb="0" cb="0"/><line nr="140" mi="0" ci="21" mb="0" cb="2"/><line nr="150" mi="0" ci="21" mb="0" cb="2"/><line nr="160" mi="0" ci="21" mb="0" cb="2"/><line nr="170" mi="0" ci="21" mb="0" cb="2"/><line nr="180" mi="0" ci="21" mb="0" cb="2"/><line nr="191" mi="28" ci="0" mb="2" cb="0"/><line nr="202" mi="28" ci="0" mb="2" cb="0"/><line nr="213" mi="0" ci="28" mb="0" cb="2"/><line nr="224" mi="30" ci="0" mb="2" cb="0"/><line nr="236" mi="30" ci="0" mb="2" cb="0"/><line nr="248" mi="30" ci="0" mb="2" cb="0"/><line nr="259" mi="28" ci="0" mb="2" cb="0"/><line nr="270" mi="28" ci="0" mb="2" cb="0"/><line nr="281" mi="0" ci="28" mb="0" cb="2"/><line nr="292" mi="30" ci="0" mb="2" cb="0"/><line nr="304" mi="30" ci="0" mb="2" cb="0"/><line nr="316" mi="30" ci="0" mb="2" cb="0"/><line nr="327" mi="28" ci="0" mb="2" cb="0"/><line nr="338" mi="28" ci="0" mb="2" cb="0"/><line nr="349" mi="0" ci="28" mb="0" cb="2"/><line nr="360" mi="30" ci="0" mb="2" cb="0"/><line nr="371" mi="30" ci="0" mb="2" cb="0"/><line nr="382" mi="30" ci="0" mb="2" cb="0"/><line nr="393" mi="28" ci="0" mb="2" cb="0"/><line nr="404" mi="28" ci="0" mb="2" cb="0"/><line nr="415" mi="0" ci="28" mb="0" cb="2"/><line nr="426" mi="30" ci="0" mb="2" cb="0"/><line nr="438" mi="30" ci="0" mb="2" cb="0"/><line nr="450" mi="30" ci="0" mb="2" cb="0"/><counter type="INSTRUCTION" missed="621" covered="319"/><counter type="BRANCH" missed="46" covered="30"/><counter type="LINE" missed="25" covered="21"/><counter type="COMPLEXITY" missed="68" covered="40"/><counter type="METHOD" missed="44" covered="26"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="1248" covered="681"/><counter type="BRANCH" missed="92" covered="60"/><counter type="LINE" missed="48" covered="44"/><counter type="COMPLEXITY" missed="134" covered="82"/><counter type="METHOD" missed="86" covered="54"/><counter type="CLASS" missed="0" covered="2"/></package><package name="com/luchersol/specialized_checkers/collection"><class name="com/luchersol/specialized_checkers/collection/CheckerList" sourcefilename="CheckerList.java"><method name="&lt;init&gt;" desc="(Ljava/util/List;Ljava/lang/String;)V" line="44"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/util/List;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/collection/CheckerList;" line="56"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/util/List;)Lcom/luchersol/specialized_checkers/collection/CheckerList;" line="67"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/collection/CheckerList;" line="77"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Lcom/luchersol/specialized_checkers/collection/CheckerList;" line="86"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="anyMatch" desc="(Ljava/util/function/Predicate;)Lcom/luchersol/specialized_checkers/collection/CheckerList;" line="96"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="allMatch" desc="(Ljava/util/function/Predicate;)Lcom/luchersol/specialized_checkers/collection/CheckerList;" line="106"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="allDistinct" desc="()Lcom/luchersol/specialized_checkers/collection/CheckerList;" line="115"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isSubset" desc="(Ljava/util/Collection;)Lcom/luchersol/specialized_checkers/collection/CheckerList;" line="125"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isSuperset" desc="(Ljava/util/Collection;)Lcom/luchersol/specialized_checkers/collection/CheckerList;" line="135"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isSufficientPercentage" desc="(Ljava/util/function/Predicate;D)Lcom/luchersol/specialized_checkers/collection/CheckerList;" line="146"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isSufficientPercentage$6" desc="(Ljava/util/function/Predicate;DLjava/util/List;)Z" line="147"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isSuperset$5" desc="(Ljava/util/Collection;Ljava/util/List;)Z" line="135"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isSubset$4" desc="(Ljava/util/Collection;Ljava/util/List;)Z" line="125"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$allDistinct$3" desc="(Ljava/util/List;)Z" line="115"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$allMatch$2" desc="(Ljava/util/function/Predicate;Ljava/util/List;)Z" line="106"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$anyMatch$1" desc="(Ljava/util/function/Predicate;Ljava/util/List;)Z" line="96"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isEmpty$0" desc="(Ljava/util/List;)Z" line="86"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="6" covered="136"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="1" covered="14"/><counter type="COMPLEXITY" missed="1" covered="19"/><counter type="METHOD" missed="1" covered="17"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/luchersol/specialized_checkers/collection/CheckerMap" sourcefilename="CheckerMap.java"><method name="&lt;init&gt;" desc="(Ljava/util/Map;Ljava/lang/String;)V" line="48"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/util/Map;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/collection/CheckerMap;" line="61"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/util/Map;)Lcom/luchersol/specialized_checkers/collection/CheckerMap;" line="73"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/collection/CheckerMap;" line="83"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Lcom/luchersol/specialized_checkers/collection/CheckerMap;" line="92"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="anyMatch" desc="(Ljava/util/function/Predicate;)Lcom/luchersol/specialized_checkers/collection/CheckerMap;" line="101"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="anyMatch" desc="(Ljava/util/function/BiPredicate;)Lcom/luchersol/specialized_checkers/collection/CheckerMap;" line="111"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="allMatch" desc="(Ljava/util/function/Predicate;)Lcom/luchersol/specialized_checkers/collection/CheckerMap;" line="121"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="allMatch" desc="(Ljava/util/function/BiPredicate;)Lcom/luchersol/specialized_checkers/collection/CheckerMap;" line="131"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$allMatch$6" desc="(Ljava/util/function/BiPredicate;Ljava/util/Map;)Z" line="131"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$allMatch$5" desc="(Ljava/util/function/BiPredicate;Ljava/util/Map$Entry;)Z" line="131"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$allMatch$4" desc="(Ljava/util/function/Predicate;Ljava/util/Map;)Z" line="121"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$anyMatch$3" desc="(Ljava/util/function/BiPredicate;Ljava/util/Map;)Z" line="111"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$anyMatch$2" desc="(Ljava/util/function/BiPredicate;Ljava/util/Map$Entry;)Z" line="111"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$anyMatch$1" desc="(Ljava/util/function/Predicate;Ljava/util/Map;)Z" line="101"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isEmpty$0" desc="(Ljava/util/Map;)Z" line="92"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="50" covered="54"/><counter type="LINE" missed="3" covered="7"/><counter type="COMPLEXITY" missed="7" covered="9"/><counter type="METHOD" missed="7" covered="9"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/luchersol/specialized_checkers/collection/CheckerSet" sourcefilename="CheckerSet.java"><method name="&lt;init&gt;" desc="(Ljava/util/Set;Ljava/lang/String;)V" line="42"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/util/Set;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/collection/CheckerSet;" line="54"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/util/Set;)Lcom/luchersol/specialized_checkers/collection/CheckerSet;" line="65"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/collection/CheckerSet;" line="75"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Lcom/luchersol/specialized_checkers/collection/CheckerSet;" line="84"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="anyMatch" desc="(Ljava/util/function/Predicate;)Lcom/luchersol/specialized_checkers/collection/CheckerSet;" line="94"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="allMatch" desc="(Ljava/util/function/Predicate;)Lcom/luchersol/specialized_checkers/collection/CheckerSet;" line="104"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isSubset" desc="(Ljava/util/Collection;)Lcom/luchersol/specialized_checkers/collection/CheckerSet;" line="114"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isSuperset" desc="(Ljava/util/Collection;)Lcom/luchersol/specialized_checkers/collection/CheckerSet;" line="124"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isSufficientPercentage" desc="(Ljava/util/function/Predicate;D)Lcom/luchersol/specialized_checkers/collection/CheckerSet;" line="135"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isSufficientPercentage$5" desc="(Ljava/util/function/Predicate;DLjava/util/Set;)Z" line="136"><counter type="INSTRUCTION" missed="0" covered="21"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isSuperset$4" desc="(Ljava/util/Collection;Ljava/util/Set;)Z" line="124"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isSubset$3" desc="(Ljava/util/Collection;Ljava/util/Set;)Z" line="114"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$allMatch$2" desc="(Ljava/util/function/Predicate;Ljava/util/Set;)Z" line="104"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$anyMatch$1" desc="(Ljava/util/function/Predicate;Ljava/util/Set;)Z" line="94"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isEmpty$0" desc="(Ljava/util/Set;)Z" line="84"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="4" covered="118"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="1" covered="13"/><counter type="COMPLEXITY" missed="1" covered="16"/><counter type="METHOD" missed="1" covered="15"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/luchersol/specialized_checkers/collection/CheckerTree" sourcefilename="CheckerTree.java"><method name="&lt;init&gt;" desc="(Lcom/luchersol/util/collection/Tree;Ljava/lang/String;)V" line="45"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Lcom/luchersol/util/collection/Tree;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/collection/CheckerTree;" line="60"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/lang/Object;Ljava/util/Map;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/collection/CheckerTree;" line="73"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/lang/Object;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/collection/CheckerTree;" line="86"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Lcom/luchersol/util/collection/Tree;)Lcom/luchersol/specialized_checkers/collection/CheckerTree;" line="100"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/lang/Object;Ljava/util/Map;)Lcom/luchersol/specialized_checkers/collection/CheckerTree;" line="112"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/lang/Object;)Lcom/luchersol/specialized_checkers/collection/CheckerTree;" line="124"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/collection/CheckerTree;" line="135"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Lcom/luchersol/specialized_checkers/collection/CheckerTree;" line="144"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isBinaryTree" desc="()Lcom/luchersol/specialized_checkers/collection/CheckerTree;" line="153"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isSymmetric" desc="()Lcom/luchersol/specialized_checkers/collection/CheckerTree;" line="162"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isFull" desc="()Lcom/luchersol/specialized_checkers/collection/CheckerTree;" line="171"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="minDepth" desc="(I)Lcom/luchersol/specialized_checkers/collection/CheckerTree;" line="181"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxDepth" desc="(I)Lcom/luchersol/specialized_checkers/collection/CheckerTree;" line="191"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="inRangeDepth" desc="(II)Lcom/luchersol/specialized_checkers/collection/CheckerTree;" line="203"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="minLeaves" desc="(I)Lcom/luchersol/specialized_checkers/collection/CheckerTree;" line="214"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxLeaves" desc="(I)Lcom/luchersol/specialized_checkers/collection/CheckerTree;" line="225"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="inRangeLeaves" desc="(II)Lcom/luchersol/specialized_checkers/collection/CheckerTree;" line="237"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="minDiamenter" desc="(I)Lcom/luchersol/specialized_checkers/collection/CheckerTree;" line="248"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxDiamenter" desc="(I)Lcom/luchersol/specialized_checkers/collection/CheckerTree;" line="259"><counter type="INSTRUCTION" missed="0" covered="24"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="inRangeDiamenter" desc="(II)Lcom/luchersol/specialized_checkers/collection/CheckerTree;" line="271"><counter type="INSTRUCTION" missed="0" covered="30"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$inRangeDiamenter$12" desc="(IILcom/luchersol/util/collection/Tree;)Z" line="271"><counter type="INSTRUCTION" missed="1" covered="11"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$maxDiamenter$11" desc="(ILcom/luchersol/util/collection/Tree;)Z" line="259"><counter type="INSTRUCTION" missed="1" covered="7"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$minDiamenter$10" desc="(ILcom/luchersol/util/collection/Tree;)Z" line="248"><counter type="INSTRUCTION" missed="1" covered="7"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$inRangeLeaves$9" desc="(IILcom/luchersol/util/collection/Tree;)Z" line="237"><counter type="INSTRUCTION" missed="1" covered="11"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$maxLeaves$8" desc="(ILcom/luchersol/util/collection/Tree;)Z" line="225"><counter type="INSTRUCTION" missed="1" covered="7"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$minLeaves$7" desc="(ILcom/luchersol/util/collection/Tree;)Z" line="214"><counter type="INSTRUCTION" missed="1" covered="7"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$inRangeDepth$6" desc="(IILcom/luchersol/util/collection/Tree;)Z" line="203"><counter type="INSTRUCTION" missed="1" covered="11"/><counter type="BRANCH" missed="2" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="2" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$maxDepth$5" desc="(ILcom/luchersol/util/collection/Tree;)Z" line="191"><counter type="INSTRUCTION" missed="1" covered="7"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$minDepth$4" desc="(ILcom/luchersol/util/collection/Tree;)Z" line="181"><counter type="INSTRUCTION" missed="1" covered="7"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isFull$3" desc="(Lcom/luchersol/util/collection/Tree;)Z" line="171"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isSymmetric$2" desc="(Lcom/luchersol/util/collection/Tree;)Z" line="162"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isBinaryTree$1" desc="(Lcom/luchersol/util/collection/Tree;)Z" line="153"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isEmpty$0" desc="(Lcom/luchersol/util/collection/Tree;)Z" line="144"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="9" covered="406"/><counter type="BRANCH" missed="12" covered="12"/><counter type="LINE" missed="0" covered="34"/><counter type="COMPLEXITY" missed="12" covered="34"/><counter type="METHOD" missed="0" covered="34"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/luchersol/specialized_checkers/collection/CheckerGraph" sourcefilename="CheckerGraph.java"><method name="&lt;init&gt;" desc="(Lcom/luchersol/util/collection/Graph;Ljava/lang/String;)V" line="48"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Lcom/luchersol/util/collection/Graph;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/collection/CheckerGraph;" line="61"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/util/Collection;ZLjava/lang/String;)Lcom/luchersol/specialized_checkers/collection/CheckerGraph;" line="75"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="(Ljava/util/Collection;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/collection/CheckerGraph;" line="90"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="(Ljava/util/Collection;Ljava/util/Collection;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/collection/CheckerGraph;" line="105"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="(Ljava/util/Collection;Ljava/util/Collection;ZLjava/lang/String;)Lcom/luchersol/specialized_checkers/collection/CheckerGraph;" line="121"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="(Lcom/luchersol/util/collection/Graph;)Lcom/luchersol/specialized_checkers/collection/CheckerGraph;" line="136"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="(Ljava/util/Collection;Z)Lcom/luchersol/specialized_checkers/collection/CheckerGraph;" line="149"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="(Ljava/util/Collection;)Lcom/luchersol/specialized_checkers/collection/CheckerGraph;" line="163"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="(Ljava/util/Collection;Ljava/util/Collection;)Lcom/luchersol/specialized_checkers/collection/CheckerGraph;" line="177"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="(Ljava/util/Collection;Ljava/util/Collection;Z)Lcom/luchersol/specialized_checkers/collection/CheckerGraph;" line="192"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="LINE" missed="2" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/collection/CheckerGraph;" line="203"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Lcom/luchersol/specialized_checkers/collection/CheckerGraph;" line="212"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isTree" desc="()Lcom/luchersol/specialized_checkers/collection/CheckerGraph;" line="221"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isBinaryTree" desc="()Lcom/luchersol/specialized_checkers/collection/CheckerGraph;" line="230"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isDirected" desc="()Lcom/luchersol/specialized_checkers/collection/CheckerGraph;" line="239"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isConnected" desc="()Lcom/luchersol/specialized_checkers/collection/CheckerGraph;" line="248"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="hasCycle" desc="()Lcom/luchersol/specialized_checkers/collection/CheckerGraph;" line="257"><counter type="INSTRUCTION" missed="8" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="containsNode" desc="(Ljava/lang/Object;)Lcom/luchersol/specialized_checkers/collection/CheckerGraph;" line="267"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="containsEdge" desc="(Ljava/lang/Object;Ljava/lang/Object;)Lcom/luchersol/specialized_checkers/collection/CheckerGraph;" line="278"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="containsEdge" desc="(Lcom/luchersol/util/collection/Graph$Edge;)Lcom/luchersol/specialized_checkers/collection/CheckerGraph;" line="288"><counter type="INSTRUCTION" missed="9" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="anyNodesMatch" desc="(Ljava/util/function/Predicate;)Lcom/luchersol/specialized_checkers/collection/CheckerGraph;" line="298"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="allNodesMatch" desc="(Ljava/util/function/Predicate;)Lcom/luchersol/specialized_checkers/collection/CheckerGraph;" line="308"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="anyEdgesMatch" desc="(Ljava/util/function/Predicate;)Lcom/luchersol/specialized_checkers/collection/CheckerGraph;" line="318"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="allEdgesMatch" desc="(Ljava/util/function/Predicate;)Lcom/luchersol/specialized_checkers/collection/CheckerGraph;" line="328"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasPath" desc="(Ljava/lang/Object;Ljava/lang/Object;)Lcom/luchersol/specialized_checkers/collection/CheckerGraph;" line="339"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="minNodes" desc="(I)Lcom/luchersol/specialized_checkers/collection/CheckerGraph;" line="349"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxNodes" desc="(I)Lcom/luchersol/specialized_checkers/collection/CheckerGraph;" line="359"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="inRangeNodes" desc="(II)Lcom/luchersol/specialized_checkers/collection/CheckerGraph;" line="370"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="minEdges" desc="(I)Lcom/luchersol/specialized_checkers/collection/CheckerGraph;" line="380"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxEdges" desc="(I)Lcom/luchersol/specialized_checkers/collection/CheckerGraph;" line="390"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="inRangeEdges" desc="(II)Lcom/luchersol/specialized_checkers/collection/CheckerGraph;" line="401"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="minWeight" desc="(D)Lcom/luchersol/specialized_checkers/collection/CheckerGraph;" line="411"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="maxWeight" desc="(D)Lcom/luchersol/specialized_checkers/collection/CheckerGraph;" line="421"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="inRangeWeight" desc="(DD)Lcom/luchersol/specialized_checkers/collection/CheckerGraph;" line="432"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$inRangeWeight$25" desc="(DDLcom/luchersol/util/collection/Graph;)Z" line="432"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$inRangeWeight$24" desc="(DDLcom/luchersol/util/collection/Graph$Edge;)Z" line="432"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$maxWeight$23" desc="(DLcom/luchersol/util/collection/Graph;)Z" line="421"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$maxWeight$22" desc="(DLcom/luchersol/util/collection/Graph$Edge;)Z" line="421"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$minWeight$21" desc="(DLcom/luchersol/util/collection/Graph;)Z" line="411"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$minWeight$20" desc="(DLcom/luchersol/util/collection/Graph$Edge;)Z" line="411"><counter type="INSTRUCTION" missed="0" covered="9"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$inRangeEdges$19" desc="(IILcom/luchersol/util/collection/Graph;)Z" line="401"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$maxEdges$18" desc="(ILcom/luchersol/util/collection/Graph;)Z" line="390"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$minEdges$17" desc="(ILcom/luchersol/util/collection/Graph;)Z" line="380"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$inRangeNodes$16" desc="(IILcom/luchersol/util/collection/Graph;)Z" line="370"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$maxNodes$15" desc="(ILcom/luchersol/util/collection/Graph;)Z" line="359"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$minNodes$14" desc="(ILcom/luchersol/util/collection/Graph;)Z" line="349"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$hasPath$13" desc="(Ljava/lang/Object;Ljava/lang/Object;Lcom/luchersol/util/collection/Graph;)Z" line="339"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$allEdgesMatch$12" desc="(Ljava/util/function/Predicate;Lcom/luchersol/util/collection/Graph;)Z" line="328"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$anyEdgesMatch$11" desc="(Ljava/util/function/Predicate;Lcom/luchersol/util/collection/Graph;)Z" line="318"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$allNodesMatch$10" desc="(Ljava/util/function/Predicate;Lcom/luchersol/util/collection/Graph;)Z" line="308"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$anyNodesMatch$9" desc="(Ljava/util/function/Predicate;Lcom/luchersol/util/collection/Graph;)Z" line="298"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$containsEdge$8" desc="(Lcom/luchersol/util/collection/Graph$Edge;Lcom/luchersol/util/collection/Graph;)Z" line="288"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$containsEdge$7" desc="(Ljava/lang/Object;Ljava/lang/Object;Lcom/luchersol/util/collection/Graph;)Z" line="278"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$containsNode$6" desc="(Ljava/lang/Object;Lcom/luchersol/util/collection/Graph;)Z" line="267"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$hasCycle$5" desc="(Lcom/luchersol/util/collection/Graph;)Z" line="257"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isConnected$4" desc="(Lcom/luchersol/util/collection/Graph;)Z" line="248"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isDirected$3" desc="(Lcom/luchersol/util/collection/Graph;)Z" line="239"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isBinaryTree$2" desc="(Lcom/luchersol/util/collection/Graph;)Z" line="230"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isTree$1" desc="(Lcom/luchersol/util/collection/Graph;)Z" line="221"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isEmpty$0" desc="(Lcom/luchersol/util/collection/Graph;)Z" line="212"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="148" covered="313"/><counter type="BRANCH" missed="3" covered="21"/><counter type="LINE" missed="23" covered="21"/><counter type="COMPLEXITY" missed="24" covered="49"/><counter type="METHOD" missed="21" covered="40"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="CheckerTree.java"><line nr="45" mi="0" ci="4" mb="0" cb="0"/><line nr="46" mi="0" ci="1" mb="0" cb="0"/><line nr="60" mi="0" ci="6" mb="0" cb="0"/><line nr="73" mi="0" ci="6" mb="0" cb="0"/><line nr="74" mi="0" ci="4" mb="0" cb="0"/><line nr="86" mi="0" ci="5" mb="0" cb="0"/><line nr="87" mi="0" ci="4" mb="0" cb="0"/><line nr="100" mi="0" ci="4" mb="0" cb="0"/><line nr="112" mi="0" ci="6" mb="0" cb="0"/><line nr="113" mi="0" ci="3" mb="0" cb="0"/><line nr="124" mi="0" ci="5" mb="0" cb="0"/><line nr="125" mi="0" ci="3" mb="0" cb="0"/><line nr="135" mi="0" ci="2" mb="0" cb="0"/><line nr="144" mi="0" ci="11" mb="0" cb="0"/><line nr="153" mi="0" ci="11" mb="0" cb="0"/><line nr="162" mi="0" ci="11" mb="0" cb="0"/><line nr="171" mi="0" ci="11" mb="0" cb="0"/><line nr="181" mi="1" ci="31" mb="1" cb="1"/><line nr="191" mi="1" ci="22" mb="1" cb="1"/><line nr="192" mi="0" ci="9" mb="0" cb="0"/><line nr="203" mi="1" ci="27" mb="2" cb="2"/><line nr="204" mi="0" ci="14" mb="0" cb="0"/><line nr="214" mi="1" ci="22" mb="1" cb="1"/><line nr="215" mi="0" ci="9" mb="0" cb="0"/><line nr="225" mi="1" ci="22" mb="1" cb="1"/><line nr="226" mi="0" ci="9" mb="0" cb="0"/><line nr="237" mi="1" ci="27" mb="2" cb="2"/><line nr="238" mi="0" ci="14" mb="0" cb="0"/><line nr="248" mi="1" ci="22" mb="1" cb="1"/><line nr="249" mi="0" ci="9" mb="0" cb="0"/><line nr="259" mi="1" ci="22" mb="1" cb="1"/><line nr="260" mi="0" ci="9" mb="0" cb="0"/><line nr="271" mi="1" ci="27" mb="2" cb="2"/><line nr="272" mi="0" ci="14" mb="0" cb="0"/><counter type="INSTRUCTION" missed="9" covered="406"/><counter type="BRANCH" missed="12" covered="12"/><counter type="LINE" missed="0" covered="34"/><counter type="COMPLEXITY" missed="12" covered="34"/><counter type="METHOD" missed="0" covered="34"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="CheckerSet.java"><line nr="42" mi="0" ci="4" mb="0" cb="0"/><line nr="43" mi="0" ci="1" mb="0" cb="0"/><line nr="54" mi="0" ci="6" mb="0" cb="0"/><line nr="65" mi="4" ci="0" mb="0" cb="0"/><line nr="75" mi="0" ci="2" mb="0" cb="0"/><line nr="84" mi="0" ci="11" mb="0" cb="0"/><line nr="94" mi="0" ci="14" mb="0" cb="0"/><line nr="104" mi="0" ci="14" mb="0" cb="0"/><line nr="114" mi="0" ci="13" mb="0" cb="0"/><line nr="124" mi="0" ci="13" mb="0" cb="0"/><line nr="135" mi="0" ci="16" mb="0" cb="0"/><line nr="136" mi="0" ci="13" mb="0" cb="0"/><line nr="137" mi="0" ci="8" mb="0" cb="2"/><line nr="138" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="4" covered="118"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="1" covered="13"/><counter type="COMPLEXITY" missed="1" covered="16"/><counter type="METHOD" missed="1" covered="15"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="CheckerGraph.java"><line nr="48" mi="0" ci="4" mb="0" cb="0"/><line nr="49" mi="0" ci="1" mb="0" cb="0"/><line nr="61" mi="0" ci="6" mb="0" cb="0"/><line nr="75" mi="6" ci="0" mb="0" cb="0"/><line nr="76" mi="4" ci="0" mb="0" cb="0"/><line nr="90" mi="5" ci="0" mb="0" cb="0"/><line nr="91" mi="4" ci="0" mb="0" cb="0"/><line nr="105" mi="6" ci="0" mb="0" cb="0"/><line nr="106" mi="4" ci="0" mb="0" cb="0"/><line nr="121" mi="7" ci="0" mb="0" cb="0"/><line nr="122" mi="4" ci="0" mb="0" cb="0"/><line nr="136" mi="4" ci="0" mb="0" cb="0"/><line nr="149" mi="6" ci="0" mb="0" cb="0"/><line nr="150" mi="3" ci="0" mb="0" cb="0"/><line nr="163" mi="5" ci="0" mb="0" cb="0"/><line nr="164" mi="3" ci="0" mb="0" cb="0"/><line nr="177" mi="6" ci="0" mb="0" cb="0"/><line nr="178" mi="3" ci="0" mb="0" cb="0"/><line nr="192" mi="7" ci="0" mb="0" cb="0"/><line nr="193" mi="3" ci="0" mb="0" cb="0"/><line nr="203" mi="0" ci="2" mb="0" cb="0"/><line nr="212" mi="0" ci="11" mb="0" cb="0"/><line nr="221" mi="11" ci="0" mb="0" cb="0"/><line nr="230" mi="11" ci="0" mb="0" cb="0"/><line nr="239" mi="11" ci="0" mb="0" cb="0"/><line nr="248" mi="11" ci="0" mb="0" cb="0"/><line nr="257" mi="11" ci="0" mb="0" cb="0"/><line nr="267" mi="0" ci="13" mb="0" cb="0"/><line nr="278" mi="0" ci="15" mb="0" cb="0"/><line nr="288" mi="13" ci="0" mb="0" cb="0"/><line nr="298" mi="0" ci="13" mb="0" cb="0"/><line nr="308" mi="0" ci="13" mb="0" cb="0"/><line nr="318" mi="0" ci="13" mb="0" cb="0"/><line nr="328" mi="0" ci="13" mb="0" cb="0"/><line nr="339" mi="0" ci="15" mb="0" cb="0"/><line nr="349" mi="0" ci="17" mb="0" cb="2"/><line nr="359" mi="0" ci="17" mb="0" cb="2"/><line nr="370" mi="0" ci="22" mb="1" cb="3"/><line nr="380" mi="0" ci="17" mb="0" cb="2"/><line nr="390" mi="0" ci="17" mb="0" cb="2"/><line nr="401" mi="0" ci="22" mb="1" cb="3"/><line nr="411" mi="0" ci="25" mb="0" cb="2"/><line nr="421" mi="0" ci="25" mb="0" cb="2"/><line nr="432" mi="0" ci="32" mb="1" cb="3"/><counter type="INSTRUCTION" missed="148" covered="313"/><counter type="BRANCH" missed="3" covered="21"/><counter type="LINE" missed="23" covered="21"/><counter type="COMPLEXITY" missed="24" covered="49"/><counter type="METHOD" missed="21" covered="40"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="CheckerList.java"><line nr="44" mi="0" ci="4" mb="0" cb="0"/><line nr="45" mi="0" ci="1" mb="0" cb="0"/><line nr="56" mi="0" ci="6" mb="0" cb="0"/><line nr="67" mi="6" ci="0" mb="0" cb="0"/><line nr="77" mi="0" ci="2" mb="0" cb="0"/><line nr="86" mi="0" ci="11" mb="0" cb="0"/><line nr="96" mi="0" ci="14" mb="0" cb="0"/><line nr="106" mi="0" ci="14" mb="0" cb="0"/><line nr="115" mi="0" ci="18" mb="0" cb="2"/><line nr="125" mi="0" ci="13" mb="0" cb="0"/><line nr="135" mi="0" ci="13" mb="0" cb="0"/><line nr="146" mi="0" ci="16" mb="0" cb="0"/><line nr="147" mi="0" ci="13" mb="0" cb="0"/><line nr="148" mi="0" ci="8" mb="0" cb="2"/><line nr="149" mi="0" ci="3" mb="0" cb="0"/><counter type="INSTRUCTION" missed="6" covered="136"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="1" covered="14"/><counter type="COMPLEXITY" missed="1" covered="19"/><counter type="METHOD" missed="1" covered="17"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="CheckerMap.java"><line nr="48" mi="0" ci="4" mb="0" cb="0"/><line nr="49" mi="0" ci="1" mb="0" cb="0"/><line nr="61" mi="0" ci="6" mb="0" cb="0"/><line nr="73" mi="4" ci="0" mb="0" cb="0"/><line nr="83" mi="0" ci="2" mb="0" cb="0"/><line nr="92" mi="0" ci="11" mb="0" cb="0"/><line nr="101" mi="0" ci="15" mb="0" cb="0"/><line nr="111" mi="23" ci="0" mb="0" cb="0"/><line nr="121" mi="0" ci="15" mb="0" cb="0"/><line nr="131" mi="23" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="50" covered="54"/><counter type="LINE" missed="3" covered="7"/><counter type="COMPLEXITY" missed="7" covered="9"/><counter type="METHOD" missed="7" covered="9"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="217" covered="1027"/><counter type="BRANCH" missed="15" covered="39"/><counter type="LINE" missed="28" covered="89"/><counter type="COMPLEXITY" missed="45" covered="127"/><counter type="METHOD" missed="30" covered="115"/><counter type="CLASS" missed="0" covered="5"/></package><package name="com/luchersol/specialized_checkers"><class name="com/luchersol/specialized_checkers/CheckerCurrency" sourcefilename="CheckerCurrency.java"><method name="&lt;init&gt;" desc="(Ljava/util/Currency;Ljava/lang/String;)V" line="42"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/util/Currency;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/CheckerCurrency;" line="53"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="(Ljava/util/Currency;)Lcom/luchersol/specialized_checkers/CheckerCurrency;" line="63"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/CheckerCurrency;" line="73"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasSymbol" desc="(Ljava/lang/String;)Lcom/luchersol/specialized_checkers/CheckerCurrency;" line="83"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasSymbol" desc="(Ljava/lang/String;Ljava/util/Locale;)Lcom/luchersol/specialized_checkers/CheckerCurrency;" line="94"><counter type="INSTRUCTION" missed="20" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="withDefaultFractionDigits" desc="(I)Lcom/luchersol/specialized_checkers/CheckerCurrency;" line="104"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isFrom" desc="(Ljava/util/Locale;)Lcom/luchersol/specialized_checkers/CheckerCurrency;" line="114"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isFrom$3" desc="(Ljava/util/Locale;Ljava/util/Currency;)Z" line="114"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$withDefaultFractionDigits$2" desc="(ILjava/util/Currency;)Z" line="104"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$hasSymbol$1" desc="(Ljava/util/Locale;Ljava/lang/String;Ljava/util/Currency;)Z" line="94"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$hasSymbol$0" desc="(Ljava/lang/String;Ljava/util/Currency;)Z" line="83"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="36" covered="71"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="3" covered="6"/><counter type="COMPLEXITY" missed="4" covered="9"/><counter type="METHOD" missed="4" covered="8"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/luchersol/specialized_checkers/CheckerColor" sourcefilename="CheckerColor.java"><method name="&lt;init&gt;" desc="(Ljava/awt/Color;Ljava/lang/String;)V" line="45"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/awt/Color;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/CheckerColor;" line="56"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="(Ljava/awt/Color;)Lcom/luchersol/specialized_checkers/CheckerColor;" line="66"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/CheckerColor;" line="76"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isBlack" desc="()Lcom/luchersol/specialized_checkers/CheckerColor;" line="85"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isWhite" desc="()Lcom/luchersol/specialized_checkers/CheckerColor;" line="94"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isGray" desc="()Lcom/luchersol/specialized_checkers/CheckerColor;" line="103"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isColor" desc="(Ljava/awt/Color;)Lcom/luchersol/specialized_checkers/CheckerColor;" line="113"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isDark" desc="()Lcom/luchersol/specialized_checkers/CheckerColor;" line="122"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isDark" desc="(D)Lcom/luchersol/specialized_checkers/CheckerColor;" line="132"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isLight" desc="()Lcom/luchersol/specialized_checkers/CheckerColor;" line="146"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isLight" desc="(D)Lcom/luchersol/specialized_checkers/CheckerColor;" line="156"><counter type="INSTRUCTION" missed="0" covered="18"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isTransparent" desc="()Lcom/luchersol/specialized_checkers/CheckerColor;" line="170"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasContrast" desc="(Ljava/awt/Color;)Lcom/luchersol/specialized_checkers/CheckerColor;" line="180"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasContrast" desc="(Ljava/awt/Color;D)Lcom/luchersol/specialized_checkers/CheckerColor;" line="191"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasAlpha" desc="(I)Lcom/luchersol/specialized_checkers/CheckerColor;" line="206"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isDesaturated" desc="(D)Lcom/luchersol/specialized_checkers/CheckerColor;" line="216"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isSimilar" desc="(Ljava/awt/Color;D)Lcom/luchersol/specialized_checkers/CheckerColor;" line="231"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isOpaque" desc="()Lcom/luchersol/specialized_checkers/CheckerColor;" line="246"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasHexadecimal" desc="(Ljava/lang/String;)Lcom/luchersol/specialized_checkers/CheckerColor;" line="256"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$hasHexadecimal$12" desc="(Ljava/lang/String;Ljava/awt/Color;)Z" line="257"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isOpaque$11" desc="(Ljava/awt/Color;)Z" line="246"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isSimilar$10" desc="(Ljava/awt/Color;DLjava/awt/Color;)Z" line="232"><counter type="INSTRUCTION" missed="0" covered="48"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="4"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isDesaturated$9" desc="(DLjava/awt/Color;)Z" line="217"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$hasAlpha$8" desc="(ILjava/awt/Color;)Z" line="206"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$hasContrast$7" desc="(Ljava/awt/Color;DLjava/awt/Color;)Z" line="192"><counter type="INSTRUCTION" missed="0" covered="47"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="3"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isTransparent$6" desc="(Ljava/awt/Color;)Z" line="170"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isLight$5" desc="(DLjava/awt/Color;)Z" line="157"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isDark$4" desc="(DLjava/awt/Color;)Z" line="133"><counter type="INSTRUCTION" missed="0" covered="26"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isColor$3" desc="(Ljava/awt/Color;Ljava/awt/Color;)Z" line="113"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isGray$2" desc="(Ljava/awt/Color;)Z" line="103"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isWhite$1" desc="(Ljava/awt/Color;)Z" line="94"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isBlack$0" desc="(Ljava/awt/Color;)Z" line="85"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="10" covered="416"/><counter type="BRANCH" missed="1" covered="19"/><counter type="LINE" missed="2" covered="41"/><counter type="COMPLEXITY" missed="3" covered="40"/><counter type="METHOD" missed="2" covered="31"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/luchersol/specialized_checkers/CheckerString" sourcefilename="CheckerString.java"><method name="&lt;init&gt;" desc="(Ljava/lang/String;Ljava/lang/String;)V" line="40"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/lang/String;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/CheckerString;" line="51"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="(Ljava/lang/String;)Lcom/luchersol/specialized_checkers/CheckerString;" line="61"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/CheckerString;" line="71"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEmpty" desc="()Lcom/luchersol/specialized_checkers/CheckerString;" line="80"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isBlank" desc="()Lcom/luchersol/specialized_checkers/CheckerString;" line="89"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="min" desc="(I)Lcom/luchersol/specialized_checkers/CheckerString;" line="99"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="max" desc="(I)Lcom/luchersol/specialized_checkers/CheckerString;" line="109"><counter type="INSTRUCTION" missed="0" covered="16"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="inRange" desc="(II)Lcom/luchersol/specialized_checkers/CheckerString;" line="120"><counter type="INSTRUCTION" missed="0" covered="22"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEqualsIgnoreCase" desc="(Ljava/lang/String;)Lcom/luchersol/specialized_checkers/CheckerString;" line="130"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="contains" desc="(Ljava/lang/CharSequence;)Lcom/luchersol/specialized_checkers/CheckerString;" line="140"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="startsWith" desc="(Ljava/lang/String;)Lcom/luchersol/specialized_checkers/CheckerString;" line="150"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="endsWith" desc="(Ljava/lang/String;)Lcom/luchersol/specialized_checkers/CheckerString;" line="160"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="matches" desc="(Ljava/lang/String;)Lcom/luchersol/specialized_checkers/CheckerString;" line="170"><counter type="INSTRUCTION" missed="0" covered="15"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isDigit" desc="()Lcom/luchersol/specialized_checkers/CheckerString;" line="179"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isDNI" desc="()Lcom/luchersol/specialized_checkers/CheckerString;" line="188"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isIPv4" desc="()Lcom/luchersol/specialized_checkers/CheckerString;" line="197"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isIPv6" desc="()Lcom/luchersol/specialized_checkers/CheckerString;" line="208"><counter type="INSTRUCTION" missed="3" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="hasSpecialCharacters" desc="()Lcom/luchersol/specialized_checkers/CheckerString;" line="219"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isPalindrome" desc="()Lcom/luchersol/specialized_checkers/CheckerString;" line="228"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isPalindrome$15" desc="(Ljava/lang/String;)Z" line="229"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$hasSpecialCharacters$14" desc="(Ljava/lang/String;)Z" line="219"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isIPv6$13" desc="(Ljava/lang/String;)Z" line="208"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isIPv4$12" desc="(Ljava/lang/String;)Z" line="197"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isDNI$11" desc="(Ljava/lang/String;)Z" line="188"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isDigit$10" desc="(Ljava/lang/String;)Z" line="179"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$matches$9" desc="(Ljava/lang/String;Ljava/lang/String;)Z" line="170"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$endsWith$8" desc="(Ljava/lang/String;Ljava/lang/String;)Z" line="160"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$startsWith$7" desc="(Ljava/lang/String;Ljava/lang/String;)Z" line="150"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$contains$6" desc="(Ljava/lang/CharSequence;Ljava/lang/String;)Z" line="140"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isEqualsIgnoreCase$5" desc="(Ljava/lang/String;Ljava/lang/String;)Z" line="130"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$inRange$4" desc="(IILjava/lang/String;)Z" line="120"><counter type="INSTRUCTION" missed="0" covered="12"/><counter type="BRANCH" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="3"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$max$3" desc="(ILjava/lang/String;)Z" line="109"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$min$2" desc="(ILjava/lang/String;)Z" line="99"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isBlank$1" desc="(Ljava/lang/String;)Z" line="89"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isEmpty$0" desc="(Ljava/lang/String;)Z" line="80"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="13" covered="280"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="2" covered="24"/><counter type="COMPLEXITY" missed="2" covered="38"/><counter type="METHOD" missed="2" covered="34"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="CheckerColor.java"><line nr="45" mi="0" ci="4" mb="0" cb="0"/><line nr="46" mi="0" ci="1" mb="0" cb="0"/><line nr="56" mi="6" ci="0" mb="0" cb="0"/><line nr="66" mi="4" ci="0" mb="0" cb="0"/><line nr="76" mi="0" ci="2" mb="0" cb="0"/><line nr="85" mi="0" ci="12" mb="0" cb="0"/><line nr="94" mi="0" ci="12" mb="0" cb="0"/><line nr="103" mi="0" ci="22" mb="1" cb="3"/><line nr="113" mi="0" ci="19" mb="0" cb="0"/><line nr="122" mi="0" ci="4" mb="0" cb="0"/><line nr="132" mi="0" ci="3" mb="0" cb="0"/><line nr="133" mi="0" ci="18" mb="0" cb="0"/><line nr="134" mi="0" ci="8" mb="0" cb="2"/><line nr="137" mi="0" ci="15" mb="0" cb="0"/><line nr="146" mi="0" ci="4" mb="0" cb="0"/><line nr="156" mi="0" ci="3" mb="0" cb="0"/><line nr="157" mi="0" ci="18" mb="0" cb="0"/><line nr="158" mi="0" ci="8" mb="0" cb="2"/><line nr="161" mi="0" ci="15" mb="0" cb="0"/><line nr="170" mi="0" ci="16" mb="0" cb="2"/><line nr="180" mi="0" ci="5" mb="0" cb="0"/><line nr="191" mi="0" ci="4" mb="0" cb="0"/><line nr="192" mi="0" ci="18" mb="0" cb="0"/><line nr="193" mi="0" ci="18" mb="0" cb="0"/><line nr="194" mi="0" ci="11" mb="0" cb="2"/><line nr="196" mi="0" ci="15" mb="0" cb="0"/><line nr="206" mi="0" ci="24" mb="0" cb="2"/><line nr="216" mi="0" ci="3" mb="0" cb="0"/><line nr="217" mi="0" ci="9" mb="0" cb="0"/><line nr="218" mi="0" ci="11" mb="0" cb="2"/><line nr="220" mi="0" ci="8" mb="0" cb="0"/><line nr="231" mi="0" ci="4" mb="0" cb="0"/><line nr="232" mi="0" ci="9" mb="0" cb="0"/><line nr="233" mi="0" ci="9" mb="0" cb="0"/><line nr="234" mi="0" ci="22" mb="0" cb="0"/><line nr="235" mi="0" ci="8" mb="0" cb="2"/><line nr="237" mi="0" ci="8" mb="0" cb="0"/><line nr="246" mi="0" ci="16" mb="0" cb="2"/><line nr="256" mi="0" ci="3" mb="0" cb="0"/><line nr="257" mi="0" ci="3" mb="0" cb="0"/><line nr="258" mi="0" ci="12" mb="0" cb="0"/><line nr="259" mi="0" ci="4" mb="0" cb="0"/><line nr="261" mi="0" ci="8" mb="0" cb="0"/><counter type="INSTRUCTION" missed="10" covered="416"/><counter type="BRANCH" missed="1" covered="19"/><counter type="LINE" missed="2" covered="41"/><counter type="COMPLEXITY" missed="3" covered="40"/><counter type="METHOD" missed="2" covered="31"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="CheckerString.java"><line nr="40" mi="0" ci="4" mb="0" cb="0"/><line nr="41" mi="0" ci="1" mb="0" cb="0"/><line nr="51" mi="6" ci="0" mb="0" cb="0"/><line nr="61" mi="4" ci="0" mb="0" cb="0"/><line nr="71" mi="0" ci="2" mb="0" cb="0"/><line nr="80" mi="0" ci="11" mb="0" cb="0"/><line nr="89" mi="0" ci="11" mb="0" cb="0"/><line nr="99" mi="0" ci="24" mb="0" cb="2"/><line nr="109" mi="0" ci="24" mb="0" cb="2"/><line nr="120" mi="0" ci="34" mb="0" cb="4"/><line nr="130" mi="0" ci="19" mb="0" cb="0"/><line nr="140" mi="0" ci="19" mb="0" cb="0"/><line nr="150" mi="0" ci="19" mb="0" cb="0"/><line nr="160" mi="0" ci="19" mb="0" cb="0"/><line nr="170" mi="0" ci="19" mb="0" cb="0"/><line nr="179" mi="0" ci="12" mb="0" cb="0"/><line nr="188" mi="0" ci="12" mb="0" cb="0"/><line nr="197" mi="0" ci="11" mb="0" cb="0"/><line nr="199" mi="0" ci="1" mb="0" cb="0"/><line nr="208" mi="3" ci="8" mb="0" cb="0"/><line nr="210" mi="0" ci="1" mb="0" cb="0"/><line nr="219" mi="0" ci="10" mb="0" cb="0"/><line nr="228" mi="0" ci="7" mb="0" cb="0"/><line nr="229" mi="0" ci="7" mb="0" cb="0"/><line nr="230" mi="0" ci="4" mb="0" cb="0"/><line nr="231" mi="0" ci="1" mb="0" cb="0"/><counter type="INSTRUCTION" missed="13" covered="280"/><counter type="BRANCH" missed="0" covered="8"/><counter type="LINE" missed="2" covered="24"/><counter type="COMPLEXITY" missed="2" covered="38"/><counter type="METHOD" missed="2" covered="34"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="CheckerCurrency.java"><line nr="42" mi="0" ci="4" mb="0" cb="0"/><line nr="43" mi="0" ci="1" mb="0" cb="0"/><line nr="53" mi="6" ci="0" mb="0" cb="0"/><line nr="63" mi="4" ci="0" mb="0" cb="0"/><line nr="73" mi="0" ci="2" mb="0" cb="0"/><line nr="83" mi="0" ci="20" mb="0" cb="0"/><line nr="94" mi="26" ci="0" mb="0" cb="0"/><line nr="104" mi="0" ci="24" mb="0" cb="2"/><line nr="114" mi="0" ci="20" mb="0" cb="0"/><counter type="INSTRUCTION" missed="36" covered="71"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="3" covered="6"/><counter type="COMPLEXITY" missed="4" covered="9"/><counter type="METHOD" missed="4" covered="8"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="59" covered="767"/><counter type="BRANCH" missed="1" covered="29"/><counter type="LINE" missed="7" covered="71"/><counter type="COMPLEXITY" missed="9" covered="87"/><counter type="METHOD" missed="8" covered="73"/><counter type="CLASS" missed="0" covered="3"/></package><package name="com/luchersol/specialized_checkers/math/numbers/bigTypes"><class name="com/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger" sourcefilename="CheckerBigInteger.java"><method name="&lt;init&gt;" desc="(Ljava/math/BigInteger;Ljava/lang/String;)V" line="44"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/math/BigInteger;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="55"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/math/BigInteger;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="65"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="75"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isEven" desc="()Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="84"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isOdd" desc="()Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="93"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isDivisibleBy" desc="(Ljava/math/BigInteger;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="103"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isPowerOfTwo" desc="()Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="112"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isProbablePrime" desc="(I)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="122"><counter type="INSTRUCTION" missed="0" covered="20"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isPositive" desc="()Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="132"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isPositiveOrZero" desc="()Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="142"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isNegative" desc="()Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="152"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isNegativeOrZero" desc="()Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="162"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isZero" desc="()Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="172"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isGreaterThan" desc="(Ljava/lang/Byte;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="183"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterThan" desc="(Ljava/lang/Short;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="194"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterThan" desc="(Ljava/lang/Integer;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="205"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isGreaterThan" desc="(Ljava/lang/Long;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="216"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterThan" desc="(Ljava/lang/Float;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="228"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterThan" desc="(Ljava/lang/Double;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="240"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Byte;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="252"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Short;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="264"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Integer;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="276"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Long;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="288"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Float;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="300"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Double;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="312"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessThan" desc="(Ljava/lang/Byte;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="324"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessThan" desc="(Ljava/lang/Short;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="336"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessThan" desc="(Ljava/lang/Integer;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="348"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isLessThan" desc="(Ljava/lang/Long;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="360"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessThan" desc="(Ljava/lang/Float;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="372"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessThan" desc="(Ljava/lang/Double;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="384"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Byte;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="396"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Short;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="408"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Integer;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="420"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Long;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="432"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Float;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="444"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Double;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigInteger;" line="456"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessOrEqualTo$33" desc="(Ljava/lang/Double;Ljava/math/BigInteger;)Z" line="456"><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessOrEqualTo$32" desc="(Ljava/lang/Float;Ljava/math/BigInteger;)Z" line="444"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessOrEqualTo$31" desc="(Ljava/lang/Long;Ljava/math/BigInteger;)Z" line="432"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessOrEqualTo$30" desc="(Ljava/lang/Integer;Ljava/math/BigInteger;)Z" line="420"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isLessOrEqualTo$29" desc="(Ljava/lang/Short;Ljava/math/BigInteger;)Z" line="408"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessOrEqualTo$28" desc="(Ljava/lang/Byte;Ljava/math/BigInteger;)Z" line="396"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessThan$27" desc="(Ljava/lang/Double;Ljava/math/BigInteger;)Z" line="384"><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessThan$26" desc="(Ljava/lang/Float;Ljava/math/BigInteger;)Z" line="372"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessThan$25" desc="(Ljava/lang/Long;Ljava/math/BigInteger;)Z" line="360"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessThan$24" desc="(Ljava/lang/Integer;Ljava/math/BigInteger;)Z" line="348"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isLessThan$23" desc="(Ljava/lang/Short;Ljava/math/BigInteger;)Z" line="336"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessThan$22" desc="(Ljava/lang/Byte;Ljava/math/BigInteger;)Z" line="324"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterOrEqualTo$21" desc="(Ljava/lang/Double;Ljava/math/BigInteger;)Z" line="312"><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterOrEqualTo$20" desc="(Ljava/lang/Float;Ljava/math/BigInteger;)Z" line="300"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterOrEqualTo$19" desc="(Ljava/lang/Long;Ljava/math/BigInteger;)Z" line="288"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterOrEqualTo$18" desc="(Ljava/lang/Integer;Ljava/math/BigInteger;)Z" line="276"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isGreaterOrEqualTo$17" desc="(Ljava/lang/Short;Ljava/math/BigInteger;)Z" line="264"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterOrEqualTo$16" desc="(Ljava/lang/Byte;Ljava/math/BigInteger;)Z" line="252"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterThan$15" desc="(Ljava/lang/Double;Ljava/math/BigInteger;)Z" line="240"><counter type="INSTRUCTION" missed="13" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterThan$14" desc="(Ljava/lang/Float;Ljava/math/BigInteger;)Z" line="228"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterThan$13" desc="(Ljava/lang/Long;Ljava/math/BigInteger;)Z" line="216"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterThan$12" desc="(Ljava/lang/Integer;Ljava/math/BigInteger;)Z" line="205"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isGreaterThan$11" desc="(Ljava/lang/Short;Ljava/math/BigInteger;)Z" line="194"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterThan$10" desc="(Ljava/lang/Byte;Ljava/math/BigInteger;)Z" line="183"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isZero$9" desc="(Ljava/math/BigInteger;)Z" line="172"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isNegativeOrZero$8" desc="(Ljava/math/BigInteger;)Z" line="162"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isNegative$7" desc="(Ljava/math/BigInteger;)Z" line="152"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isPositiveOrZero$6" desc="(Ljava/math/BigInteger;)Z" line="142"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isPositive$5" desc="(Ljava/math/BigInteger;)Z" line="132"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isProbablePrime$4" desc="(ILjava/math/BigInteger;)Z" line="122"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isPowerOfTwo$3" desc="(Ljava/math/BigInteger;)Z" line="112"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="1" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isDivisibleBy$2" desc="(Ljava/math/BigInteger;Ljava/math/BigInteger;)Z" line="103"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isOdd$1" desc="(Ljava/math/BigInteger;)Z" line="93"><counter type="INSTRUCTION" missed="0" covered="10"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isEven$0" desc="(Ljava/math/BigInteger;)Z" line="84"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="616" covered="360"/><counter type="BRANCH" missed="41" covered="23"/><counter type="LINE" missed="20" covered="19"/><counter type="COMPLEXITY" missed="61" covered="43"/><counter type="METHOD" missed="40" covered="32"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigDecimal" sourcefilename="CheckerBigDecimal.java"><method name="&lt;init&gt;" desc="(Ljava/math/BigDecimal;Ljava/lang/String;)V" line="42"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/math/BigDecimal;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigDecimal;" line="53"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/math/BigDecimal;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigDecimal;" line="63"><counter type="INSTRUCTION" missed="0" covered="4"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigDecimal;" line="73"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isPositive" desc="()Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigDecimal;" line="83"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isPositiveOrZero" desc="()Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigDecimal;" line="93"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isNegative" desc="()Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigDecimal;" line="103"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isNegativeOrZero" desc="()Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigDecimal;" line="113"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isZero" desc="()Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigDecimal;" line="123"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isGreaterThan" desc="(Ljava/lang/Byte;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigDecimal;" line="134"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isGreaterThan" desc="(Ljava/lang/Short;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigDecimal;" line="145"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isGreaterThan" desc="(Ljava/lang/Integer;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigDecimal;" line="156"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isGreaterThan" desc="(Ljava/lang/Long;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigDecimal;" line="168"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isGreaterThan" desc="(Ljava/lang/Float;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigDecimal;" line="180"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isGreaterThan" desc="(Ljava/lang/Double;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigDecimal;" line="192"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Byte;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigDecimal;" line="204"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Short;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigDecimal;" line="216"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Integer;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigDecimal;" line="228"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Long;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigDecimal;" line="240"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Float;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigDecimal;" line="252"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Double;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigDecimal;" line="264"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessThan" desc="(Ljava/lang/Byte;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigDecimal;" line="276"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessThan" desc="(Ljava/lang/Short;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigDecimal;" line="288"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessThan" desc="(Ljava/lang/Integer;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigDecimal;" line="300"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isLessThan" desc="(Ljava/lang/Long;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigDecimal;" line="312"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessThan" desc="(Ljava/lang/Float;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigDecimal;" line="324"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessThan" desc="(Ljava/lang/Double;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigDecimal;" line="336"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Byte;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigDecimal;" line="348"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Short;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigDecimal;" line="360"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Integer;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigDecimal;" line="372"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Long;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigDecimal;" line="384"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Float;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigDecimal;" line="396"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Double;)Lcom/luchersol/specialized_checkers/math/numbers/bigTypes/CheckerBigDecimal;" line="408"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessOrEqualTo$28" desc="(Ljava/lang/Double;Ljava/math/BigDecimal;)Z" line="408"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessOrEqualTo$27" desc="(Ljava/lang/Float;Ljava/math/BigDecimal;)Z" line="396"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessOrEqualTo$26" desc="(Ljava/lang/Long;Ljava/math/BigDecimal;)Z" line="384"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessOrEqualTo$25" desc="(Ljava/lang/Integer;Ljava/math/BigDecimal;)Z" line="372"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isLessOrEqualTo$24" desc="(Ljava/lang/Short;Ljava/math/BigDecimal;)Z" line="360"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessOrEqualTo$23" desc="(Ljava/lang/Byte;Ljava/math/BigDecimal;)Z" line="348"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessThan$22" desc="(Ljava/lang/Double;Ljava/math/BigDecimal;)Z" line="336"><counter type="INSTRUCTION" missed="2" covered="8"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isLessThan$21" desc="(Ljava/lang/Float;Ljava/math/BigDecimal;)Z" line="324"><counter type="INSTRUCTION" missed="2" covered="9"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isLessThan$20" desc="(Ljava/lang/Long;Ljava/math/BigDecimal;)Z" line="312"><counter type="INSTRUCTION" missed="2" covered="8"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isLessThan$19" desc="(Ljava/lang/Integer;Ljava/math/BigDecimal;)Z" line="300"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isLessThan$18" desc="(Ljava/lang/Short;Ljava/math/BigDecimal;)Z" line="288"><counter type="INSTRUCTION" missed="2" covered="9"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isLessThan$17" desc="(Ljava/lang/Byte;Ljava/math/BigDecimal;)Z" line="276"><counter type="INSTRUCTION" missed="2" covered="9"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isGreaterOrEqualTo$16" desc="(Ljava/lang/Double;Ljava/math/BigDecimal;)Z" line="264"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterOrEqualTo$15" desc="(Ljava/lang/Float;Ljava/math/BigDecimal;)Z" line="252"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterOrEqualTo$14" desc="(Ljava/lang/Long;Ljava/math/BigDecimal;)Z" line="240"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterOrEqualTo$13" desc="(Ljava/lang/Integer;Ljava/math/BigDecimal;)Z" line="228"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isGreaterOrEqualTo$12" desc="(Ljava/lang/Short;Ljava/math/BigDecimal;)Z" line="216"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterOrEqualTo$11" desc="(Ljava/lang/Byte;Ljava/math/BigDecimal;)Z" line="204"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterThan$10" desc="(Ljava/lang/Double;Ljava/math/BigDecimal;)Z" line="192"><counter type="INSTRUCTION" missed="1" covered="9"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isGreaterThan$9" desc="(Ljava/lang/Float;Ljava/math/BigDecimal;)Z" line="180"><counter type="INSTRUCTION" missed="1" covered="10"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isGreaterThan$8" desc="(Ljava/lang/Long;Ljava/math/BigDecimal;)Z" line="168"><counter type="INSTRUCTION" missed="1" covered="9"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isGreaterThan$7" desc="(Ljava/lang/Integer;Ljava/math/BigDecimal;)Z" line="156"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isGreaterThan$6" desc="(Ljava/lang/Short;Ljava/math/BigDecimal;)Z" line="145"><counter type="INSTRUCTION" missed="1" covered="10"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isGreaterThan$5" desc="(Ljava/lang/Byte;Ljava/math/BigDecimal;)Z" line="134"><counter type="INSTRUCTION" missed="1" covered="10"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isZero$4" desc="(Ljava/math/BigDecimal;)Z" line="123"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isNegativeOrZero$3" desc="(Ljava/math/BigDecimal;)Z" line="113"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isNegative$2" desc="(Ljava/math/BigDecimal;)Z" line="103"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isPositiveOrZero$1" desc="(Ljava/math/BigDecimal;)Z" line="93"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isPositive$0" desc="(Ljava/math/BigDecimal;)Z" line="83"><counter type="INSTRUCTION" missed="0" covered="7"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="406" covered="428"/><counter type="BRANCH" missed="30" covered="28"/><counter type="LINE" missed="10" covered="24"/><counter type="COMPLEXITY" missed="45" covered="46"/><counter type="METHOD" missed="25" covered="37"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="CheckerBigInteger.java"><line nr="44" mi="0" ci="4" mb="0" cb="0"/><line nr="45" mi="0" ci="1" mb="0" cb="0"/><line nr="55" mi="0" ci="6" mb="0" cb="0"/><line nr="65" mi="0" ci="4" mb="0" cb="0"/><line nr="75" mi="0" ci="2" mb="0" cb="0"/><line nr="84" mi="0" ci="20" mb="0" cb="0"/><line nr="93" mi="0" ci="24" mb="0" cb="2"/><line nr="103" mi="0" ci="25" mb="0" cb="0"/><line nr="112" mi="0" ci="25" mb="1" cb="3"/><line nr="122" mi="0" ci="24" mb="0" cb="0"/><line nr="132" mi="0" ci="21" mb="0" cb="2"/><line nr="142" mi="0" ci="21" mb="0" cb="2"/><line nr="152" mi="0" ci="21" mb="0" cb="2"/><line nr="162" mi="0" ci="21" mb="0" cb="2"/><line nr="172" mi="0" ci="21" mb="0" cb="2"/><line nr="183" mi="30" ci="0" mb="2" cb="0"/><line nr="194" mi="30" ci="0" mb="2" cb="0"/><line nr="205" mi="0" ci="30" mb="0" cb="2"/><line nr="216" mi="29" ci="0" mb="2" cb="0"/><line nr="228" mi="33" ci="0" mb="2" cb="0"/><line nr="240" mi="32" ci="0" mb="2" cb="0"/><line nr="252" mi="30" ci="0" mb="2" cb="0"/><line nr="264" mi="30" ci="0" mb="2" cb="0"/><line nr="276" mi="0" ci="30" mb="0" cb="2"/><line nr="288" mi="29" ci="0" mb="2" cb="0"/><line nr="300" mi="33" ci="0" mb="2" cb="0"/><line nr="312" mi="32" ci="0" mb="2" cb="0"/><line nr="324" mi="30" ci="0" mb="2" cb="0"/><line nr="336" mi="30" ci="0" mb="2" cb="0"/><line nr="348" mi="0" ci="30" mb="0" cb="2"/><line nr="360" mi="29" ci="0" mb="2" cb="0"/><line nr="372" mi="33" ci="0" mb="2" cb="0"/><line nr="384" mi="32" ci="0" mb="2" cb="0"/><line nr="396" mi="30" ci="0" mb="2" cb="0"/><line nr="408" mi="30" ci="0" mb="2" cb="0"/><line nr="420" mi="0" ci="30" mb="0" cb="2"/><line nr="432" mi="29" ci="0" mb="2" cb="0"/><line nr="444" mi="33" ci="0" mb="2" cb="0"/><line nr="456" mi="32" ci="0" mb="2" cb="0"/><counter type="INSTRUCTION" missed="616" covered="360"/><counter type="BRANCH" missed="41" covered="23"/><counter type="LINE" missed="20" covered="19"/><counter type="COMPLEXITY" missed="61" covered="43"/><counter type="METHOD" missed="40" covered="32"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="CheckerBigDecimal.java"><line nr="42" mi="0" ci="4" mb="0" cb="0"/><line nr="43" mi="0" ci="1" mb="0" cb="0"/><line nr="53" mi="0" ci="6" mb="0" cb="0"/><line nr="63" mi="0" ci="4" mb="0" cb="0"/><line nr="73" mi="0" ci="2" mb="0" cb="0"/><line nr="83" mi="0" ci="21" mb="0" cb="2"/><line nr="93" mi="0" ci="21" mb="0" cb="2"/><line nr="103" mi="0" ci="21" mb="0" cb="2"/><line nr="113" mi="0" ci="21" mb="0" cb="2"/><line nr="123" mi="0" ci="21" mb="0" cb="2"/><line nr="134" mi="1" ci="29" mb="1" cb="1"/><line nr="145" mi="1" ci="29" mb="1" cb="1"/><line nr="156" mi="0" ci="30" mb="0" cb="2"/><line nr="168" mi="1" ci="28" mb="1" cb="1"/><line nr="180" mi="1" ci="29" mb="1" cb="1"/><line nr="192" mi="1" ci="28" mb="1" cb="1"/><line nr="204" mi="30" ci="0" mb="2" cb="0"/><line nr="216" mi="30" ci="0" mb="2" cb="0"/><line nr="228" mi="0" ci="30" mb="0" cb="2"/><line nr="240" mi="29" ci="0" mb="2" cb="0"/><line nr="252" mi="30" ci="0" mb="2" cb="0"/><line nr="264" mi="29" ci="0" mb="2" cb="0"/><line nr="276" mi="21" ci="9" mb="1" cb="1"/><line nr="288" mi="21" ci="9" mb="1" cb="1"/><line nr="300" mi="0" ci="30" mb="0" cb="2"/><line nr="312" mi="21" ci="8" mb="1" cb="1"/><line nr="324" mi="21" ci="9" mb="1" cb="1"/><line nr="336" mi="21" ci="8" mb="1" cb="1"/><line nr="348" mi="30" ci="0" mb="2" cb="0"/><line nr="360" mi="30" ci="0" mb="2" cb="0"/><line nr="372" mi="0" ci="30" mb="0" cb="2"/><line nr="384" mi="29" ci="0" mb="2" cb="0"/><line nr="396" mi="30" ci="0" mb="2" cb="0"/><line nr="408" mi="29" ci="0" mb="2" cb="0"/><counter type="INSTRUCTION" missed="406" covered="428"/><counter type="BRANCH" missed="30" covered="28"/><counter type="LINE" missed="10" covered="24"/><counter type="COMPLEXITY" missed="45" covered="46"/><counter type="METHOD" missed="25" covered="37"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="1022" covered="788"/><counter type="BRANCH" missed="71" covered="51"/><counter type="LINE" missed="30" covered="43"/><counter type="COMPLEXITY" missed="106" covered="89"/><counter type="METHOD" missed="65" covered="69"/><counter type="CLASS" missed="0" covered="2"/></package><package name="com/luchersol/specialized_checkers/math/numbers/decimalTypes"><class name="com/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble" sourcefilename="CheckerDouble.java"><method name="&lt;init&gt;" desc="(Ljava/lang/Double;Ljava/lang/String;)V" line="40"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/lang/Double;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="51"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="(Ljava/lang/Number;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="62"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="(Ljava/lang/Double;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="73"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="(Ljava/lang/Number;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="83"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="93"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isNaN" desc="()Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="102"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isInfinite" desc="()Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="111"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isPositive" desc="()Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="121"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isPositiveOrZero" desc="()Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="131"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isNegative" desc="()Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="141"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isNegativeOrZero" desc="()Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="151"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isZero" desc="()Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="161"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isGreaterThan" desc="(Ljava/lang/Byte;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="172"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterThan" desc="(Ljava/lang/Short;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="183"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterThan" desc="(Ljava/lang/Integer;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="194"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isGreaterThan" desc="(Ljava/lang/Long;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="205"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterThan" desc="(Ljava/lang/Float;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="216"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterThan" desc="(Ljava/lang/Double;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="227"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Byte;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="238"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Short;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="249"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Integer;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="260"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Long;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="271"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Float;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="282"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Double;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="293"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isLessThan" desc="(Ljava/lang/Byte;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="304"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessThan" desc="(Ljava/lang/Short;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="315"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessThan" desc="(Ljava/lang/Integer;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="326"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isLessThan" desc="(Ljava/lang/Long;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="337"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessThan" desc="(Ljava/lang/Float;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="348"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessThan" desc="(Ljava/lang/Double;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="359"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Byte;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="370"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Short;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="381"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Integer;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="392"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Long;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="403"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Float;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="414"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Double;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerDouble;" line="425"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isLessOrEqualTo$30" desc="(Ljava/lang/Double;Ljava/lang/Double;)Z" line="425"><counter type="INSTRUCTION" missed="1" covered="9"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isLessOrEqualTo$29" desc="(Ljava/lang/Float;Ljava/lang/Double;)Z" line="414"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessOrEqualTo$28" desc="(Ljava/lang/Long;Ljava/lang/Double;)Z" line="403"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessOrEqualTo$27" desc="(Ljava/lang/Integer;Ljava/lang/Double;)Z" line="392"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isLessOrEqualTo$26" desc="(Ljava/lang/Short;Ljava/lang/Double;)Z" line="381"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessOrEqualTo$25" desc="(Ljava/lang/Byte;Ljava/lang/Double;)Z" line="370"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessThan$24" desc="(Ljava/lang/Double;Ljava/lang/Double;)Z" line="359"><counter type="INSTRUCTION" missed="1" covered="9"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isLessThan$23" desc="(Ljava/lang/Float;Ljava/lang/Double;)Z" line="348"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessThan$22" desc="(Ljava/lang/Long;Ljava/lang/Double;)Z" line="337"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessThan$21" desc="(Ljava/lang/Integer;Ljava/lang/Double;)Z" line="326"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isLessThan$20" desc="(Ljava/lang/Short;Ljava/lang/Double;)Z" line="315"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessThan$19" desc="(Ljava/lang/Byte;Ljava/lang/Double;)Z" line="304"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterOrEqualTo$18" desc="(Ljava/lang/Double;Ljava/lang/Double;)Z" line="293"><counter type="INSTRUCTION" missed="1" covered="9"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isGreaterOrEqualTo$17" desc="(Ljava/lang/Float;Ljava/lang/Double;)Z" line="282"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterOrEqualTo$16" desc="(Ljava/lang/Long;Ljava/lang/Double;)Z" line="271"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterOrEqualTo$15" desc="(Ljava/lang/Integer;Ljava/lang/Double;)Z" line="260"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isGreaterOrEqualTo$14" desc="(Ljava/lang/Short;Ljava/lang/Double;)Z" line="249"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterOrEqualTo$13" desc="(Ljava/lang/Byte;Ljava/lang/Double;)Z" line="238"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterThan$12" desc="(Ljava/lang/Double;Ljava/lang/Double;)Z" line="227"><counter type="INSTRUCTION" missed="1" covered="9"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isGreaterThan$11" desc="(Ljava/lang/Float;Ljava/lang/Double;)Z" line="216"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterThan$10" desc="(Ljava/lang/Long;Ljava/lang/Double;)Z" line="205"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterThan$9" desc="(Ljava/lang/Integer;Ljava/lang/Double;)Z" line="194"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isGreaterThan$8" desc="(Ljava/lang/Short;Ljava/lang/Double;)Z" line="183"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterThan$7" desc="(Ljava/lang/Byte;Ljava/lang/Double;)Z" line="172"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isZero$6" desc="(Ljava/lang/Double;)Z" line="161"><counter type="INSTRUCTION" missed="1" covered="8"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isNegativeOrZero$5" desc="(Ljava/lang/Double;)Z" line="151"><counter type="INSTRUCTION" missed="1" covered="8"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isNegative$4" desc="(Ljava/lang/Double;)Z" line="141"><counter type="INSTRUCTION" missed="1" covered="8"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isPositiveOrZero$3" desc="(Ljava/lang/Double;)Z" line="131"><counter type="INSTRUCTION" missed="1" covered="8"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isPositive$2" desc="(Ljava/lang/Double;)Z" line="121"><counter type="INSTRUCTION" missed="1" covered="8"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isInfinite$1" desc="(Ljava/lang/Double;)Z" line="111"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isNaN$0" desc="(Ljava/lang/Double;)Z" line="102"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="510" covered="383"/><counter type="BRANCH" missed="41" covered="17"/><counter type="LINE" missed="20" covered="18"/><counter type="COMPLEXITY" missed="61" covered="36"/><counter type="METHOD" missed="36" covered="32"/><counter type="CLASS" missed="0" covered="1"/></class><class name="com/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat" sourcefilename="CheckerFloat.java"><method name="&lt;init&gt;" desc="(Ljava/lang/Float;Ljava/lang/String;)V" line="40"><counter type="INSTRUCTION" missed="0" covered="5"/><counter type="LINE" missed="0" covered="2"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/lang/Float;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="51"><counter type="INSTRUCTION" missed="0" covered="6"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/lang/Number;Ljava/lang/String;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="62"><counter type="INSTRUCTION" missed="0" covered="8"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="check" desc="(Ljava/lang/Float;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="72"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="check" desc="(Ljava/lang/Number;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="82"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="self" desc="()Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="92"><counter type="INSTRUCTION" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isNaN" desc="()Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="101"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isInfinite" desc="()Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="110"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isPositive" desc="()Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="120"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isPositiveOrZero" desc="()Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="130"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isNegative" desc="()Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="140"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isNegativeOrZero" desc="()Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="150"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isZero" desc="()Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="160"><counter type="INSTRUCTION" missed="0" covered="14"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isGreaterThan" desc="(Ljava/lang/Byte;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="172"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterThan" desc="(Ljava/lang/Short;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="184"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterThan" desc="(Ljava/lang/Integer;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="196"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isGreaterThan" desc="(Ljava/lang/Long;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="208"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterThan" desc="(Ljava/lang/Float;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="220"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterThan" desc="(Ljava/lang/Double;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="232"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Byte;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="244"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Short;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="256"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Integer;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="268"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Long;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="280"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Float;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="292"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isGreaterOrEqualTo" desc="(Ljava/lang/Double;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="304"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isLessThan" desc="(Ljava/lang/Byte;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="316"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessThan" desc="(Ljava/lang/Short;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="328"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessThan" desc="(Ljava/lang/Integer;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="340"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isLessThan" desc="(Ljava/lang/Long;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="352"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessThan" desc="(Ljava/lang/Float;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="364"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessThan" desc="(Ljava/lang/Double;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="376"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Byte;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="388"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Short;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="400"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Integer;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="412"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Long;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="424"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Float;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="435"><counter type="INSTRUCTION" missed="19" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="isLessOrEqualTo" desc="(Ljava/lang/Double;)Lcom/luchersol/specialized_checkers/math/numbers/decimalTypes/CheckerFloat;" line="446"><counter type="INSTRUCTION" missed="0" covered="19"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isLessOrEqualTo$30" desc="(Ljava/lang/Double;Ljava/lang/Float;)Z" line="446"><counter type="INSTRUCTION" missed="1" covered="10"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isLessOrEqualTo$29" desc="(Ljava/lang/Float;Ljava/lang/Float;)Z" line="435"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessOrEqualTo$28" desc="(Ljava/lang/Long;Ljava/lang/Float;)Z" line="424"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessOrEqualTo$27" desc="(Ljava/lang/Integer;Ljava/lang/Float;)Z" line="412"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isLessOrEqualTo$26" desc="(Ljava/lang/Short;Ljava/lang/Float;)Z" line="400"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessOrEqualTo$25" desc="(Ljava/lang/Byte;Ljava/lang/Float;)Z" line="388"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessThan$24" desc="(Ljava/lang/Double;Ljava/lang/Float;)Z" line="376"><counter type="INSTRUCTION" missed="1" covered="10"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isLessThan$23" desc="(Ljava/lang/Float;Ljava/lang/Float;)Z" line="364"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessThan$22" desc="(Ljava/lang/Long;Ljava/lang/Float;)Z" line="352"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessThan$21" desc="(Ljava/lang/Integer;Ljava/lang/Float;)Z" line="340"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isLessThan$20" desc="(Ljava/lang/Short;Ljava/lang/Float;)Z" line="328"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isLessThan$19" desc="(Ljava/lang/Byte;Ljava/lang/Float;)Z" line="316"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterOrEqualTo$18" desc="(Ljava/lang/Double;Ljava/lang/Float;)Z" line="304"><counter type="INSTRUCTION" missed="1" covered="10"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isGreaterOrEqualTo$17" desc="(Ljava/lang/Float;Ljava/lang/Float;)Z" line="292"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterOrEqualTo$16" desc="(Ljava/lang/Long;Ljava/lang/Float;)Z" line="280"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterOrEqualTo$15" desc="(Ljava/lang/Integer;Ljava/lang/Float;)Z" line="268"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isGreaterOrEqualTo$14" desc="(Ljava/lang/Short;Ljava/lang/Float;)Z" line="256"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterOrEqualTo$13" desc="(Ljava/lang/Byte;Ljava/lang/Float;)Z" line="244"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterThan$12" desc="(Ljava/lang/Double;Ljava/lang/Float;)Z" line="232"><counter type="INSTRUCTION" missed="1" covered="10"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isGreaterThan$11" desc="(Ljava/lang/Float;Ljava/lang/Float;)Z" line="220"><counter type="INSTRUCTION" missed="10" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterThan$10" desc="(Ljava/lang/Long;Ljava/lang/Float;)Z" line="208"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterThan$9" desc="(Ljava/lang/Integer;Ljava/lang/Float;)Z" line="196"><counter type="INSTRUCTION" missed="0" covered="11"/><counter type="BRANCH" missed="0" covered="2"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="2"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isGreaterThan$8" desc="(Ljava/lang/Short;Ljava/lang/Float;)Z" line="184"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isGreaterThan$7" desc="(Ljava/lang/Byte;Ljava/lang/Float;)Z" line="172"><counter type="INSTRUCTION" missed="11" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="lambda$isZero$6" desc="(Ljava/lang/Float;)Z" line="160"><counter type="INSTRUCTION" missed="1" covered="8"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isNegativeOrZero$5" desc="(Ljava/lang/Float;)Z" line="150"><counter type="INSTRUCTION" missed="1" covered="8"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isNegative$4" desc="(Ljava/lang/Float;)Z" line="140"><counter type="INSTRUCTION" missed="1" covered="8"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isPositiveOrZero$3" desc="(Ljava/lang/Float;)Z" line="130"><counter type="INSTRUCTION" missed="1" covered="8"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isPositive$2" desc="(Ljava/lang/Float;)Z" line="120"><counter type="INSTRUCTION" missed="1" covered="8"/><counter type="BRANCH" missed="1" covered="1"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="1" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isInfinite$1" desc="(Ljava/lang/Float;)Z" line="110"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><method name="lambda$isNaN$0" desc="(Ljava/lang/Float;)Z" line="101"><counter type="INSTRUCTION" missed="0" covered="3"/><counter type="LINE" missed="0" covered="1"/><counter type="COMPLEXITY" missed="0" covered="1"/><counter type="METHOD" missed="0" covered="1"/></method><counter type="INSTRUCTION" missed="494" covered="401"/><counter type="BRANCH" missed="41" covered="17"/><counter type="LINE" missed="18" covered="20"/><counter type="COMPLEXITY" missed="59" covered="38"/><counter type="METHOD" missed="34" covered="34"/><counter type="CLASS" missed="0" covered="1"/></class><sourcefile name="CheckerFloat.java"><line nr="40" mi="0" ci="4" mb="0" cb="0"/><line nr="41" mi="0" ci="1" mb="0" cb="0"/><line nr="51" mi="0" ci="6" mb="0" cb="0"/><line nr="62" mi="0" ci="8" mb="0" cb="0"/><line nr="72" mi="4" ci="0" mb="0" cb="0"/><line nr="82" mi="5" ci="0" mb="0" cb="0"/><line nr="92" mi="0" ci="2" mb="0" cb="0"/><line nr="101" mi="0" ci="17" mb="0" cb="0"/><line nr="110" mi="0" ci="17" mb="0" cb="0"/><line nr="120" mi="1" ci="22" mb="1" cb="1"/><line nr="130" mi="1" ci="22" mb="1" cb="1"/><line nr="140" mi="1" ci="22" mb="1" cb="1"/><line nr="150" mi="1" ci="22" mb="1" cb="1"/><line nr="160" mi="1" ci="22" mb="1" cb="1"/><line nr="172" mi="30" ci="0" mb="2" cb="0"/><line nr="184" mi="30" ci="0" mb="2" cb="0"/><line nr="196" mi="0" ci="30" mb="0" cb="2"/><line nr="208" mi="30" ci="0" mb="2" cb="0"/><line nr="220" mi="29" ci="0" mb="2" cb="0"/><line nr="232" mi="1" ci="29" mb="1" cb="1"/><line nr="244" mi="30" ci="0" mb="2" cb="0"/><line nr="256" mi="30" ci="0" mb="2" cb="0"/><line nr="268" mi="0" ci="30" mb="0" cb="2"/><line nr="280" mi="30" ci="0" mb="2" cb="0"/><line nr="292" mi="29" ci="0" mb="2" cb="0"/><line nr="304" mi="1" ci="29" mb="1" cb="1"/><line nr="316" mi="30" ci="0" mb="2" cb="0"/><line nr="328" mi="30" ci="0" mb="2" cb="0"/><line nr="340" mi="0" ci="30" mb="0" cb="2"/><line nr="352" mi="30" ci="0" mb="2" cb="0"/><line nr="364" mi="29" ci="0" mb="2" cb="0"/><line nr="376" mi="1" ci="29" mb="1" cb="1"/><line nr="388" mi="30" ci="0" mb="2" cb="0"/><line nr="400" mi="30" ci="0" mb="2" cb="0"/><line nr="412" mi="0" ci="30" mb="0" cb="2"/><line nr="424" mi="30" ci="0" mb="2" cb="0"/><line nr="435" mi="29" ci="0" mb="2" cb="0"/><line nr="446" mi="1" ci="29" mb="1" cb="1"/><counter type="INSTRUCTION" missed="494" covered="401"/><counter type="BRANCH" missed="41" covered="17"/><counter type="LINE" missed="18" covered="20"/><counter type="COMPLEXITY" missed="59" covered="38"/><counter type="METHOD" missed="34" covered="34"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><sourcefile name="CheckerDouble.java"><line nr="40" mi="0" ci="4" mb="0" cb="0"/><line nr="41" mi="0" ci="1" mb="0" cb="0"/><line nr="51" mi="6" ci="0" mb="0" cb="0"/><line nr="62" mi="6" ci="0" mb="0" cb="0"/><line nr="73" mi="4" ci="0" mb="0" cb="0"/><line nr="83" mi="5" ci="0" mb="0" cb="0"/><line nr="93" mi="0" ci="2" mb="0" cb="0"/><line nr="102" mi="0" ci="17" mb="0" cb="0"/><line nr="111" mi="0" ci="17" mb="0" cb="0"/><line nr="121" mi="1" ci="22" mb="1" cb="1"/><line nr="131" mi="1" ci="22" mb="1" cb="1"/><line nr="141" mi="1" ci="22" mb="1" cb="1"/><line nr="151" mi="1" ci="22" mb="1" cb="1"/><line nr="161" mi="1" ci="22" mb="1" cb="1"/><line nr="172" mi="30" ci="0" mb="2" cb="0"/><line nr="183" mi="30" ci="0" mb="2" cb="0"/><line nr="194" mi="0" ci="30" mb="0" cb="2"/><line nr="205" mi="30" ci="0" mb="2" cb="0"/><line nr="216" mi="30" ci="0" mb="2" cb="0"/><line nr="227" mi="1" ci="28" mb="1" cb="1"/><line nr="238" mi="30" ci="0" mb="2" cb="0"/><line nr="249" mi="30" ci="0" mb="2" cb="0"/><line nr="260" mi="0" ci="30" mb="0" cb="2"/><line nr="271" mi="30" ci="0" mb="2" cb="0"/><line nr="282" mi="30" ci="0" mb="2" cb="0"/><line nr="293" mi="1" ci="28" mb="1" cb="1"/><line nr="304" mi="30" ci="0" mb="2" cb="0"/><line nr="315" mi="30" ci="0" mb="2" cb="0"/><line nr="326" mi="0" ci="30" mb="0" cb="2"/><line nr="337" mi="30" ci="0" mb="2" cb="0"/><line nr="348" mi="30" ci="0" mb="2" cb="0"/><line nr="359" mi="1" ci="28" mb="1" cb="1"/><line nr="370" mi="30" ci="0" mb="2" cb="0"/><line nr="381" mi="30" ci="0" mb="2" cb="0"/><line nr="392" mi="0" ci="30" mb="0" cb="2"/><line nr="403" mi="30" ci="0" mb="2" cb="0"/><line nr="414" mi="30" ci="0" mb="2" cb="0"/><line nr="425" mi="1" ci="28" mb="1" cb="1"/><counter type="INSTRUCTION" missed="510" covered="383"/><counter type="BRANCH" missed="41" covered="17"/><counter type="LINE" missed="20" covered="18"/><counter type="COMPLEXITY" missed="61" covered="36"/><counter type="METHOD" missed="36" covered="32"/><counter type="CLASS" missed="0" covered="1"/></sourcefile><counter type="INSTRUCTION" missed="1004" covered="784"/><counter type="BRANCH" missed="82" covered="34"/><counter type="LINE" missed="38" covered="38"/><counter type="COMPLEXITY" missed="120" covered="74"/><counter type="METHOD" missed="70" covered="66"/><counter type="CLASS" missed="0" covered="2"/></package><package name="com/luchersol/specialized_checkers/math/numbers"><class name="com/luchersol/specialized_checkers/math/numbers/InterfaceCheckerNumber" sourcefilename="InterfaceCheckerNumber.java"/><sourcefile name="InterfaceCheckerNumber.java"/></package><counter type="INSTRUCTION" missed="4261" covered="8710"/><counter type="BRANCH" missed="359" covered="453"/><counter type="LINE" missed="296" covered="893"/><counter type="COMPLEXITY" missed="553" covered="958"/><counter type="METHOD" missed="310" covered="795"/><counter type="CLASS" missed="1" covered="34"/></report>